
line_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00003890  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ccc  08003ccc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000005c  08003d30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08003d30  0002047c  2**0
=======
  1 .text         00003b7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb8  08003fb8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000005c  0800401c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800401c  0002047c  2**0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   0000a11d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8c  00000000  00000000  0002a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008aa  00000000  00000000  0002c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001742e  00000000  00000000  0002d052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c820  00000000  00000000  00044480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097495  00000000  00000000  00050ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033c8  00000000  00000000  000e8138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eb500  2**0
=======
 13 .debug_info   0000a193  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8b  00000000  00000000  0002a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008aa  00000000  00000000  0002c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001742e  00000000  00000000  0002d0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c844  00000000  00000000  000444f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009749f  00000000  00000000  00050d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033c8  00000000  00000000  000e81dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eb5a4  2**0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	08003a18 	.word	0x08003a18
=======
 80001c0:	08003d04 	.word	0x08003d04
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
<<<<<<< HEAD
 80001dc:	08003a18 	.word	0x08003a18
=======
 80001dc:	08003d04 	.word	0x08003d04
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <LCD_setRST+0x24>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <LCD_setRST+0x24>)
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	8093      	strh	r3, [r2, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000274 	.word	0x20000274

080005a4 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <LCD_setCE+0x24>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <LCD_setCE+0x24>)
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	8193      	strh	r3, [r2, #12]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000274 	.word	0x20000274

080005cc <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <LCD_setDC+0x24>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <LCD_setDC+0x24>)
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	8293      	strh	r3, [r2, #20]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000274 	.word	0x20000274

080005f4 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8000600:	4a05      	ldr	r2, [pc, #20]	; (8000618 <LCD_setDIN+0x24>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <LCD_setDIN+0x24>)
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	8393      	strh	r3, [r2, #28]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000274 	.word	0x20000274

0800061c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8000628:	4a05      	ldr	r2, [pc, #20]	; (8000640 <LCD_setCLK+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <LCD_setCLK+0x24>)
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000274 	.word	0x20000274

08000644 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e026      	b.n	80006a2 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <LCD_send+0x70>)
 8000656:	6998      	ldr	r0, [r3, #24]
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <LCD_send+0x70>)
 800065a:	8b99      	ldrh	r1, [r3, #28]
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	f1c3 0307 	rsb	r3, r3, #7
 8000664:	fa42 f303 	asr.w	r3, r2, r3
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
<<<<<<< HEAD
 8000678:	f001 fa7e 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000678:	f001 fbf4 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <LCD_send+0x70>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LCD_send+0x70>)
 8000682:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000684:	2201      	movs	r2, #1
 8000686:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000688:	f001 fa76 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000688:	f001 fbec 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <LCD_send+0x70>)
 800068e:	6a1b      	ldr	r3, [r3, #32]
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <LCD_send+0x70>)
 8000692:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000698:	f001 fa6e 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000698:	f001 fbe4 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  for(i = 0; i < 8; i++){
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	3301      	adds	r3, #1
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	d9d5      	bls.n	8000654 <LCD_send+0x10>
  }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000274 	.word	0x20000274

080006b8 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d11c      	bne.n	8000708 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <LCD_write+0x90>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <LCD_write+0x90>)
 80006d4:	8a91      	ldrh	r1, [r2, #20]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4618      	mov	r0, r3
<<<<<<< HEAD
 80006da:	f001 fa4d 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 80006da:	f001 fbc3 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <LCD_write+0x90>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <LCD_write+0x90>)
 80006e4:	8991      	ldrh	r1, [r2, #12]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4618      	mov	r0, r3
<<<<<<< HEAD
 80006ea:	f001 fa45 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 80006ea:	f001 fbbb 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    LCD_send(data);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffa7 	bl	8000644 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <LCD_write+0x90>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <LCD_write+0x90>)
 80006fc:	8991      	ldrh	r1, [r2, #12]
 80006fe:	2201      	movs	r2, #1
 8000700:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000702:	f001 fa39 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000702:	f001 fbaf 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8000706:	e01b      	b.n	8000740 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <LCD_write+0x90>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LCD_write+0x90>)
 800070e:	8a91      	ldrh	r1, [r2, #20]
 8000710:	2201      	movs	r2, #1
 8000712:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000714:	f001 fa30 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000714:	f001 fba6 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <LCD_write+0x90>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LCD_write+0x90>)
 800071e:	8991      	ldrh	r1, [r2, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000724:	f001 fa28 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000724:	f001 fb9e 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    LCD_send(data);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff8a 	bl	8000644 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LCD_write+0x90>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <LCD_write+0x90>)
 8000736:	8991      	ldrh	r1, [r2, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800073c:	f001 fa1c 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 800073c:	f001 fb92 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000274 	.word	0x20000274

0800074c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <LCD_init+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <LCD_init+0x64>)
 8000756:	8891      	ldrh	r1, [r2, #4]
 8000758:	2200      	movs	r2, #0
 800075a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800075c:	f001 fa0c 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 800075c:	f001 fb82 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <LCD_init+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <LCD_init+0x64>)
 8000766:	8891      	ldrh	r1, [r2, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800076c:	f001 fa04 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 800076c:	f001 fb7a 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8000770:	2100      	movs	r1, #0
 8000772:	2021      	movs	r0, #33	; 0x21
 8000774:	f7ff ffa0 	bl	80006b8 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8000778:	2100      	movs	r1, #0
 800077a:	20b8      	movs	r0, #184	; 0xb8
 800077c:	f7ff ff9c 	bl	80006b8 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8000780:	2100      	movs	r1, #0
 8000782:	2004      	movs	r0, #4
 8000784:	f7ff ff98 	bl	80006b8 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8000788:	2100      	movs	r1, #0
 800078a:	2014      	movs	r0, #20
 800078c:	f7ff ff94 	bl	80006b8 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8000790:	2100      	movs	r1, #0
 8000792:	2020      	movs	r0, #32
 8000794:	f7ff ff90 	bl	80006b8 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8000798:	2100      	movs	r1, #0
 800079a:	200c      	movs	r0, #12
 800079c:	f7ff ff8c 	bl	80006b8 <LCD_write>
  LCD_clrScr();
 80007a0:	f000 f86c 	bl	800087c <LCD_clrScr>
  lcd.inverttext = false;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <LCD_init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000274 	.word	0x20000274
 80007b4:	20000078 	.word	0x20000078

080007b8 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e02d      	b.n	8000824 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <LCD_putChar+0x7c>)
 80007ca:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 80007ce:	f083 0301 	eor.w	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d010      	beq.n	80007fa <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f1a3 0220 	sub.w	r2, r3, #32
 80007de:	4916      	ldr	r1, [pc, #88]	; (8000838 <LCD_putChar+0x80>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	18ca      	adds	r2, r1, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff60 	bl	80006b8 <LCD_write>
 80007f8:	e011      	b.n	800081e <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f1a3 0220 	sub.w	r2, r3, #32
 8000800:	490d      	ldr	r1, [pc, #52]	; (8000838 <LCD_putChar+0x80>)
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	18ca      	adds	r2, r1, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	43db      	mvns	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff4d 	bl	80006b8 <LCD_write>
  for(int i = 0; i < 6; i++){
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b05      	cmp	r3, #5
 8000828:	ddce      	ble.n	80007c8 <LCD_putChar+0x10>
  }
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000078 	.word	0x20000078
<<<<<<< HEAD
 8000838:	08003a40 	.word	0x08003a40
=======
 8000838:	08003d2c 	.word	0x08003d2c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

0800083c <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
 8000848:	4613      	mov	r3, r2
 800084a:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 800084c:	78ba      	ldrb	r2, [r7, #2]
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f830 	bl	80008b8 <LCD_goXY>
  while(*str){
 8000858:	e006      	b.n	8000868 <LCD_print+0x2c>
    LCD_putChar(*str++);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffa8 	bl	80007b8 <LCD_putChar>
  while(*str){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f4      	bne.n	800085a <LCD_print+0x1e>
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e00b      	b.n	80008a0 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8000888:	2101      	movs	r1, #1
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ff14 	bl	80006b8 <LCD_write>
    lcd.buffer[i] = 0;
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <LCD_clrScr+0x38>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80008a6:	dbef      	blt.n	8000888 <LCD_clrScr+0xc>
  }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000078 	.word	0x20000078

080008b8 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fef0 	bl	80006b8 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fee8 	bl	80006b8 <LCD_write>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80008f6:	f000 fbf1 	bl	80010dc <HAL_Init>
=======
 80008f6:	f000 fbf7 	bl	80010e8 <HAL_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE BEGIN Init */


  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80008fa:	f000 f8d9 	bl	8000ab0 <SystemClock_Config>
=======
 80008fa:	f000 f8eb 	bl	8000ad4 <SystemClock_Config>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80008fe:	f000 fa3f 	bl	8000d80 <MX_GPIO_Init>
=======
 80008fe:	f000 fa45 	bl	8000d8c <MX_GPIO_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
<<<<<<< HEAD
 8000906:	4866      	ldr	r0, [pc, #408]	; (8000aa0 <main+0x1b0>)
 8000908:	f7ff fe38 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	4864      	ldr	r0, [pc, #400]	; (8000aa0 <main+0x1b0>)
 8000910:	f7ff fe48 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4862      	ldr	r0, [pc, #392]	; (8000aa0 <main+0x1b0>)
 8000918:	f7ff fe58 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	4860      	ldr	r0, [pc, #384]	; (8000aa0 <main+0x1b0>)
 8000920:	f7ff fe68 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000924:	2108      	movs	r1, #8
 8000926:	485e      	ldr	r0, [pc, #376]	; (8000aa0 <main+0x1b0>)
=======
 8000906:	486d      	ldr	r0, [pc, #436]	; (8000abc <main+0x1cc>)
 8000908:	f7ff fe38 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	486b      	ldr	r0, [pc, #428]	; (8000abc <main+0x1cc>)
 8000910:	f7ff fe48 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4869      	ldr	r0, [pc, #420]	; (8000abc <main+0x1cc>)
 8000918:	f7ff fe58 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	4867      	ldr	r0, [pc, #412]	; (8000abc <main+0x1cc>)
 8000920:	f7ff fe68 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000924:	2108      	movs	r1, #8
 8000926:	4865      	ldr	r0, [pc, #404]	; (8000abc <main+0x1cc>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 8000928:	f7ff fe78 	bl	800061c <LCD_setCLK>


  LCD_init();
 800092c:	f7ff ff0e 	bl	800074c <LCD_init>
  LCD_print("Hello World", 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
<<<<<<< HEAD
 8000934:	485b      	ldr	r0, [pc, #364]	; (8000aa4 <main+0x1b4>)
=======
 8000934:	4862      	ldr	r0, [pc, #392]	; (8000ac0 <main+0x1d0>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 8000936:	f7ff ff81 	bl	800083c <LCD_print>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800093a:	f000 f8b9 	bl	8000ab0 <SystemClock_Config>
=======
 800093a:	f000 f8cb 	bl	8000ad4 <SystemClock_Config>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800093e:	f000 fa1f 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000942:	f000 f913 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000946:	f000 f963 	bl	8000c10 <MX_TIM1_Init>
=======
 800093e:	f000 fa25 	bl	8000d8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000942:	f000 f925 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000946:	f000 f975 	bl	8000c34 <MX_TIM1_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 800094a:	f44f 7180 	mov.w	r1, #256	; 0x100
<<<<<<< HEAD
 800094e:	4854      	ldr	r0, [pc, #336]	; (8000aa0 <main+0x1b0>)
 8000950:	f7ff fe14 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4852      	ldr	r0, [pc, #328]	; (8000aa0 <main+0x1b0>)
 8000958:	f7ff fe24 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4850      	ldr	r0, [pc, #320]	; (8000aa0 <main+0x1b0>)
 8000960:	f7ff fe34 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000964:	2120      	movs	r1, #32
 8000966:	484e      	ldr	r0, [pc, #312]	; (8000aa0 <main+0x1b0>)
 8000968:	f7ff fe44 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 800096c:	2108      	movs	r1, #8
 800096e:	484c      	ldr	r0, [pc, #304]	; (8000aa0 <main+0x1b0>)
=======
 800094e:	485b      	ldr	r0, [pc, #364]	; (8000abc <main+0x1cc>)
 8000950:	f7ff fe14 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4859      	ldr	r0, [pc, #356]	; (8000abc <main+0x1cc>)
 8000958:	f7ff fe24 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4857      	ldr	r0, [pc, #348]	; (8000abc <main+0x1cc>)
 8000960:	f7ff fe34 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000964:	2120      	movs	r1, #32
 8000966:	4855      	ldr	r0, [pc, #340]	; (8000abc <main+0x1cc>)
 8000968:	f7ff fe44 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 800096c:	2108      	movs	r1, #8
 800096e:	4853      	ldr	r0, [pc, #332]	; (8000abc <main+0x1cc>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 8000970:	f7ff fe54 	bl	800061c <LCD_setCLK>


  LCD_init();
 8000974:	f7ff feea 	bl	800074c <LCD_init>
  LCD_print("Hello World", 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
<<<<<<< HEAD
 800097c:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <main+0x1b4>)
=======
 800097c:	4850      	ldr	r0, [pc, #320]	; (8000ac0 <main+0x1d0>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 800097e:	f7ff ff5d 	bl	800083c <LCD_print>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000982:	f000 f895 	bl	8000ab0 <SystemClock_Config>
=======
 8000982:	f000 f8a7 	bl	8000ad4 <SystemClock_Config>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000986:	f000 f9fb 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 800098a:	f000 f8ef 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM1_Init();
 800098e:	f000 f93f 	bl	8000c10 <MX_TIM1_Init>
=======
 8000986:	f000 fa01 	bl	8000d8c <MX_GPIO_Init>
  MX_ADC1_Init();
 800098a:	f000 f901 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM1_Init();
 800098e:	f000 f951 	bl	8000c34 <MX_TIM1_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
<<<<<<< HEAD
 8000996:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <main+0x1b0>)
 8000998:	f7ff fdf0 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	4840      	ldr	r0, [pc, #256]	; (8000aa0 <main+0x1b0>)
 80009a0:	f7ff fe00 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	483e      	ldr	r0, [pc, #248]	; (8000aa0 <main+0x1b0>)
 80009a8:	f7ff fe10 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80009ac:	2120      	movs	r1, #32
 80009ae:	483c      	ldr	r0, [pc, #240]	; (8000aa0 <main+0x1b0>)
 80009b0:	f7ff fe20 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80009b4:	2108      	movs	r1, #8
 80009b6:	483a      	ldr	r0, [pc, #232]	; (8000aa0 <main+0x1b0>)
=======
 8000996:	4849      	ldr	r0, [pc, #292]	; (8000abc <main+0x1cc>)
 8000998:	f7ff fdf0 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	4847      	ldr	r0, [pc, #284]	; (8000abc <main+0x1cc>)
 80009a0:	f7ff fe00 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4845      	ldr	r0, [pc, #276]	; (8000abc <main+0x1cc>)
 80009a8:	f7ff fe10 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80009ac:	2120      	movs	r1, #32
 80009ae:	4843      	ldr	r0, [pc, #268]	; (8000abc <main+0x1cc>)
 80009b0:	f7ff fe20 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80009b4:	2108      	movs	r1, #8
 80009b6:	4841      	ldr	r0, [pc, #260]	; (8000abc <main+0x1cc>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 80009b8:	f7ff fe30 	bl	800061c <LCD_setCLK>


  LCD_init();
 80009bc:	f7ff fec6 	bl	800074c <LCD_init>
  LCD_print("Hello World", 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
<<<<<<< HEAD
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <main+0x1b4>)
=======
 80009c4:	483e      	ldr	r0, [pc, #248]	; (8000ac0 <main+0x1d0>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 80009c6:	f7ff ff39 	bl	800083c <LCD_print>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80009ca:	f000 f871 	bl	8000ab0 <SystemClock_Config>
=======
 80009ca:	f000 f883 	bl	8000ad4 <SystemClock_Config>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80009ce:	f000 f9d7 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009d2:	f000 f8cb 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM1_Init();
 80009d6:	f000 f91b 	bl	8000c10 <MX_TIM1_Init>
=======
 80009ce:	f000 f9dd 	bl	8000d8c <MX_GPIO_Init>
  MX_ADC1_Init();
 80009d2:	f000 f8dd 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009d6:	f000 f92d 	bl	8000c34 <MX_TIM1_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
<<<<<<< HEAD
 80009de:	4830      	ldr	r0, [pc, #192]	; (8000aa0 <main+0x1b0>)
 80009e0:	f7ff fdcc 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <main+0x1b0>)
 80009e8:	f7ff fddc 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <main+0x1b0>)
 80009f0:	f7ff fdec 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80009f4:	2120      	movs	r1, #32
 80009f6:	482a      	ldr	r0, [pc, #168]	; (8000aa0 <main+0x1b0>)
 80009f8:	f7ff fdfc 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80009fc:	2108      	movs	r1, #8
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <main+0x1b0>)
=======
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <main+0x1cc>)
 80009e0:	f7ff fdcc 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	4835      	ldr	r0, [pc, #212]	; (8000abc <main+0x1cc>)
 80009e8:	f7ff fddc 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4833      	ldr	r0, [pc, #204]	; (8000abc <main+0x1cc>)
 80009f0:	f7ff fdec 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 80009f4:	2120      	movs	r1, #32
 80009f6:	4831      	ldr	r0, [pc, #196]	; (8000abc <main+0x1cc>)
 80009f8:	f7ff fdfc 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 80009fc:	2108      	movs	r1, #8
 80009fe:	482f      	ldr	r0, [pc, #188]	; (8000abc <main+0x1cc>)
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 8000a00:	f7ff fe0c 	bl	800061c <LCD_setCLK>


  LCD_init();
 8000a04:	f7ff fea2 	bl	800074c <LCD_init>
  LCD_print("Hello World", 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
<<<<<<< HEAD
 8000a0c:	4825      	ldr	r0, [pc, #148]	; (8000aa4 <main+0x1b4>)
 8000a0e:	f7ff ff15 	bl	800083c <LCD_print>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f84d 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 f9b3 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a1a:	f000 f8a7 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a1e:	f000 f8f7 	bl	8000c10 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4820      	ldr	r0, [pc, #128]	; (8000aa8 <main+0x1b8>)
 8000a26:	f001 fd8d 	bl	8002544 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <main+0x1b8>)
 8000a2e:	f001 fd89 	bl	8002544 <HAL_TIM_PWM_Start>
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <main+0x1b0>)
 8000a38:	f7ff fda0 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <main+0x1b0>)
 8000a40:	f7ff fdb0 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <main+0x1b0>)
 8000a48:	f7ff fdc0 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <main+0x1b0>)
 8000a50:	f7ff fdd0 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000a54:	2108      	movs	r1, #8
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <main+0x1b0>)
 8000a58:	f7ff fde0 	bl	800061c <LCD_setCLK>

=======
 8000a0c:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <main+0x1d0>)
 8000a0e:	f7ff ff15 	bl	800083c <LCD_print>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f85f 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 f9b9 	bl	8000d8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a1a:	f000 f8b9 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a1e:	f000 f909 	bl	8000c34 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN Init */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <main+0x1d4>)
 8000a26:	f001 ff03 	bl	8002830 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <main+0x1d4>)
 8000a2e:	f001 feff 	bl	8002830 <HAL_TIM_PWM_Start>
  LCD_setRST(RST_GPIO_Port, RST_Pin);
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	4821      	ldr	r0, [pc, #132]	; (8000abc <main+0x1cc>)
 8000a38:	f7ff fda0 	bl	800057c <LCD_setRST>
  LCD_setCE(CE_GPIO_Port, CE_Pin);
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <main+0x1cc>)
 8000a40:	f7ff fdb0 	bl	80005a4 <LCD_setCE>
  LCD_setDC(DC_GPIO_Port, DC_Pin);
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	481d      	ldr	r0, [pc, #116]	; (8000abc <main+0x1cc>)
 8000a48:	f7ff fdc0 	bl	80005cc <LCD_setDC>
  LCD_setDIN(DIN_GPIO_Port, DIN_Pin);
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	481b      	ldr	r0, [pc, #108]	; (8000abc <main+0x1cc>)
 8000a50:	f7ff fdd0 	bl	80005f4 <LCD_setDIN>
  LCD_setCLK(CLK_GPIO_Port, CLK_Pin);
 8000a54:	2108      	movs	r1, #8
 8000a56:	4819      	ldr	r0, [pc, #100]	; (8000abc <main+0x1cc>)
 8000a58:	f7ff fde0 	bl	800061c <LCD_setCLK>

>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  LCD_init();
 8000a5c:	f7ff fe76 	bl	800074c <LCD_init>
  LCD_print("Hello World", 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
<<<<<<< HEAD
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <main+0x1b4>)
 8000a66:	f7ff fee9 	bl	800083c <LCD_print>
=======
 8000a64:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <main+0x1d0>)
 8000a66:	f7ff fee9 	bl	800083c <LCD_print>
  uint16_t dc;
  uint16_t dc_0;
  uint16_t readValue;
  char adc_str[10];

  HAL_ADC_Start(&hadc1);
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <main+0x1d8>)
 8000a6c:	f000 fc16 	bl	800129c <HAL_ADC_Start>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< HEAD
	  dc = 1225;
 8000a6a:	f240 43c9 	movw	r3, #1225	; 0x4c9
 8000a6e:	81fb      	strh	r3, [r7, #14]
	 // TIM1->CCR1 = dc;
	  dc_2 = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	81bb      	strh	r3, [r7, #12]
	/*  TIM1->CCR3 = dc_2;*/
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dc); // Update duty cycle for PA8
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <main+0x1b8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	89fa      	ldrh	r2, [r7, #14]
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, dc_2); // Update duty cycle for PA10
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <main+0x1b8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	89ba      	ldrh	r2, [r7, #12]
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
	  sprintf(adc_str, "%d", dc);
 8000a84:	89fa      	ldrh	r2, [r7, #14]
 8000a86:	463b      	mov	r3, r7
 8000a88:	4908      	ldr	r1, [pc, #32]	; (8000aac <main+0x1bc>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fb20 	bl	80030d0 <siprintf>
	  LCD_print(adc_str,0, 1);
 8000a90:	463b      	mov	r3, r7
 8000a92:	2201      	movs	r2, #1
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fed0 	bl	800083c <LCD_print>
	  dc = 1225;
 8000a9c:	e7e5      	b.n	8000a6a <main+0x17a>
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	08003a30 	.word	0x08003a30
 8000aa8:	200002e4 	.word	0x200002e4
 8000aac:	08003a3c 	.word	0x08003a3c

08000ab0 <SystemClock_Config>:
=======
	  dc = 35000;
 8000a70:	f648 03b8 	movw	r3, #35000	; 0x88b8
 8000a74:	81fb      	strh	r3, [r7, #14]
	  dc_0 = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	81bb      	strh	r3, [r7, #12]
	  TIM1->CCR1 = dc;
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <main+0x1dc>)
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR3 = dc_0;
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <main+0x1dc>)
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	63d3      	str	r3, [r2, #60]	; 0x3c
	  sprintf(adc_str, "%d", dc);
 8000a86:	89fa      	ldrh	r2, [r7, #14]
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <main+0x1e0>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fc95 	bl	80033bc <siprintf>
	  LCD_print(adc_str,0, 1);
 8000a92:	463b      	mov	r3, r7
 8000a94:	2201      	movs	r2, #1
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fecf 	bl	800083c <LCD_print>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x1d8>)
 8000aa4:	f000 fcae 	bl	8001404 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <main+0x1d8>)
 8000aaa:	f000 fd36 	bl	800151a <HAL_ADC_GetValue>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	817b      	strh	r3, [r7, #10]
	  HAL_Delay(500);
 8000ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab6:	f000 fb89 	bl	80011cc <HAL_Delay>
	  dc = 35000;
 8000aba:	e7d9      	b.n	8000a70 <main+0x180>
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	08003d1c 	.word	0x08003d1c
 8000ac4:	200002e4 	.word	0x200002e4
 8000ac8:	2000029c 	.word	0x2000029c
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	08003d28 	.word	0x08003d28

08000ad4 <SystemClock_Config>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fb26 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
=======
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	; 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fc8a 	bl	80033fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <SystemClock_Config+0xb4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <SystemClock_Config+0xb4>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <SystemClock_Config+0xb4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <SystemClock_Config+0xb8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <SystemClock_Config+0xb8>)
 8000afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <SystemClock_Config+0xb8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
=======
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <SystemClock_Config+0xb4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xb4>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xb4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 f843 	bl	8001bac <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b2c:	f000 f96c 	bl	8000e08 <Error_Handler>
=======
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 f9a7 	bl	8001e98 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b50:	f000 f960 	bl	8000e14 <Error_Handler>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000b30:	230f      	movs	r3, #15
 8000b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 faa6 	bl	800209c <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b56:	f000 f957 	bl	8000e08 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	; 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_ADC1_Init>:
=======
 8000b54:	230f      	movs	r3, #15
 8000b56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fc0a 	bl	8002388 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b7a:	f000 f94b 	bl	8000e14 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_ADC1_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
=======
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
=======
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b80:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <MX_ADC1_Init+0xa0>)
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bcc:	f000 faf8 	bl	80011c0 <HAL_ADC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f917 	bl	8000e08 <Error_Handler>
=======
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_ADC1_Init+0x9c>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_ADC1_Init+0xa0>)
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000bf0:	f000 fb10 	bl	8001214 <HAL_ADC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 f90b 	bl	8000e14 <Error_Handler>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< HEAD
 8000bda:	2308      	movs	r3, #8
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_ADC1_Init+0x98>)
 8000bec:	f000 fb2c 	bl	8001248 <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bf6:	f000 f907 	bl	8000e08 <Error_Handler>
=======
 8000bfe:	2308      	movs	r3, #8
 8000c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_ADC1_Init+0x98>)
 8000c10:	f000 fc90 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c1a:	f000 f8fb 	bl	8000e14 <Error_Handler>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000029c 	.word	0x2000029c
 8000c08:	40012000 	.word	0x40012000
 8000c0c:	0f000001 	.word	0x0f000001

08000c10 <MX_TIM1_Init>:
=======
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000029c 	.word	0x2000029c
 8000c2c:	40012000 	.word	0x40012000
 8000c30:	0f000001 	.word	0x0f000001

08000c34 <MX_TIM1_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
=======
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8000c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fa61 	bl	8003110 <memset>
=======
 8000c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fbc5 	bl	80033fc <memset>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c50:	4a4a      	ldr	r2, [pc, #296]	; (8000d7c <MX_TIM1_Init+0x16c>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c54:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c56:	220f      	movs	r2, #15
 8000c58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c62:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7a:	483f      	ldr	r0, [pc, #252]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c7c:	f001 fbba 	bl	80023f4 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c86:	f000 f8bf 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c94:	4619      	mov	r1, r3
 8000c96:	4838      	ldr	r0, [pc, #224]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000c98:	f001 fdc6 	bl	8002828 <HAL_TIM_ConfigClockSource>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ca2:	f000 f8b1 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca6:	4834      	ldr	r0, [pc, #208]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000ca8:	f001 fbf3 	bl	8002492 <HAL_TIM_PWM_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cb2:	f000 f8a9 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482c      	ldr	r0, [pc, #176]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000cc6:	f002 f943 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cd0:	f000 f89a 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd4:	2360      	movs	r3, #96	; 0x60
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000cfa:	f001 fcd3 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d04:	f000 f880 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000d12:	f001 fcc7 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000d1c:	f000 f874 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2208      	movs	r2, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000d2a:	f001 fcbb 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000d34:	f000 f868 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000d5c:	f002 f966 	bl	800302c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d66:	f000 f84f 	bl	8000e08 <Error_Handler>
=======
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c74:	4a44      	ldr	r2, [pc, #272]	; (8000d88 <MX_TIM1_Init+0x154>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000c84:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c86:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9e:	4839      	ldr	r0, [pc, #228]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000ca0:	f001 fd1e 	bl	80026e0 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000caa:	f000 f8b3 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4832      	ldr	r0, [pc, #200]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000cbc:	f001 ff2a 	bl	8002b14 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cc6:	f000 f8a5 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cca:	482e      	ldr	r0, [pc, #184]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000ccc:	f001 fd57 	bl	800277e <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cd6:	f000 f89d 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4826      	ldr	r0, [pc, #152]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000cea:	f002 faa7 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cf4:	f000 f88e 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf8:	2360      	movs	r3, #96	; 0x60
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4819      	ldr	r0, [pc, #100]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000d1e:	f001 fe37 	bl	8002990 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d28:	f000 f874 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	2208      	movs	r2, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000d36:	f001 fe2b 	bl	8002990 <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000d40:	f000 f868 	bl	8000e14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000d68:	f002 fad6 	bl	8003318 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d72:	f000 f84f 	bl	8000e14 <Error_Handler>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM1_Init+0x168>)
 8000d6c:	f000 f8e0 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3758      	adds	r7, #88	; 0x58
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002e4 	.word	0x200002e4
 8000d7c:	40010000 	.word	0x40010000

08000d80 <MX_GPIO_Init>:
=======
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM1_Init+0x150>)
 8000d78:	f000 f8e0 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3758      	adds	r7, #88	; 0x58
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200002e4 	.word	0x200002e4
 8000d88:	40010000 	.word	0x40010000

08000d8c <MX_GPIO_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
=======
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_GPIO_Init+0x80>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|CLK_Pin|DIN_Pin|DC_Pin
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f248 11e8 	movw	r1, #33256	; 0x81e8
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <MX_GPIO_Init+0x84>)
 8000dd6:	f000 fecf 	bl	8001b78 <HAL_GPIO_WritePin>
=======
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_GPIO_Init+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|CLK_Pin|DIN_Pin|DC_Pin
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f248 11e8 	movw	r1, #33256	; 0x81e8
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <MX_GPIO_Init+0x84>)
 8000de2:	f001 f83f 	bl	8001e64 <HAL_GPIO_WritePin>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                          |CE_Pin|RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BL_Pin CLK_Pin DIN_Pin DC_Pin
                           CE_Pin RST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|CLK_Pin|DIN_Pin|DC_Pin
<<<<<<< HEAD
 8000dda:	f248 13e8 	movw	r3, #33256	; 0x81e8
 8000dde:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_GPIO_Init+0x84>)
 8000df4:	f000 fd3c 	bl	8001870 <HAL_GPIO_Init>
=======
 8000de6:	f248 13e8 	movw	r3, #33256	; 0x81e8
 8000dea:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_GPIO_Init+0x84>)
 8000e00:	f000 feac 	bl	8001b5c <HAL_GPIO_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <Error_Handler>:
=======
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400

08000e14 <Error_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
=======
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
=======
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
=======
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
=======
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
=======
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_ADC_MspInit>:
=======
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_ADC_MspInit>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_ADC_MspInit+0x7c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d127      	bne.n	8000ed6 <HAL_ADC_MspInit+0x72>
=======
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_ADC_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d127      	bne.n	8000ee2 <HAL_ADC_MspInit+0x72>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_ADC_MspInit+0x80>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
=======
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_ADC_MspInit+0x80>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_ADC_MspInit+0x84>)
 8000ed2:	f000 fccd 	bl	8001870 <HAL_GPIO_Init>
=======
 8000eca:	2301      	movs	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_ADC_MspInit+0x84>)
 8000ede:	f000 fe3d 	bl	8001b5c <HAL_GPIO_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_TIM_Base_MspInit>:
=======
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <HAL_TIM_Base_MspInit>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_TIM_Base_MspInit+0x3c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10d      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x2e>
=======
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_TIM_Base_MspInit+0x3c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10d      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x2e>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_Base_MspInit+0x40>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x40>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_TIM_Base_MspInit+0x40>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
=======
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x40>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <HAL_TIM_Base_MspInit+0x40>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_TIM_Base_MspInit+0x40>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_TIM_MspPostInit+0x68>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d11e      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x60>
=======
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40010000 	.word	0x40010000
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11e      	bne.n	8000f9c <HAL_TIM_MspPostInit+0x60>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_TIM_MspPostInit+0x70>)
 8000f8c:	f000 fc70 	bl	8001870 <HAL_GPIO_Init>
=======
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000f7a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_TIM_MspPostInit+0x70>)
 8000f98:	f000 fde0 	bl	8001b5c <HAL_GPIO_Init>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <NMI_Handler>:
=======
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <NMI_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
=======
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:
=======
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
=======
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:
=======
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
=======
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:
=======
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
=======
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:
=======
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
=======
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:
=======
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
=======
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:
=======
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
=======
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:
=======
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
=======
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:
=======
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
=======
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000ff0:	f000 f8c6 	bl	8001180 <HAL_IncTick>
=======
 8000ffc:	f000 f8c6 	bl	800118c <HAL_IncTick>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_sbrk>:
=======
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <_sbrk>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
=======
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
=======
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
=======
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f002 f87a 	bl	8003120 <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20020000 	.word	0x20020000
 8001058:	00000400 	.word	0x00000400
 800105c:	2000032c 	.word	0x2000032c
 8001060:	20000480 	.word	0x20000480

08001064 <SystemInit>:
=======
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f002 f9ea 	bl	800340c <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20020000 	.word	0x20020000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000032c 	.word	0x2000032c
 800106c:	20000480 	.word	0x20000480

08001070 <SystemInit>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:
=======
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 f839 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fc19 	bl	80008f0 <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010cc:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 80010d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010d4:	2000047c 	.word	0x2000047c

080010d8 <ADC_IRQHandler>:
=======
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109a:	490e      	ldr	r1, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b0:	4c0b      	ldr	r4, [pc, #44]	; (80010e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010be:	f7ff ffd7 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f002 f9a9 	bl	8003418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fc13 	bl	80008f0 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010d8:	08003fc0 	.word	0x08003fc0
  ldr r2, =_sbss
 80010dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010e0:	2000047c 	.word	0x2000047c

080010e4 <ADC_IRQHandler>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
=======
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6013      	str	r3, [r2, #0]
=======
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_Init+0x40>)
 80010f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f6:	6013      	str	r3, [r2, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
=======
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_Init+0x40>)
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6013      	str	r3, [r2, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
=======
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x40>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001104:	2003      	movs	r0, #3
 8001106:	f000 fb7f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fe80 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_InitTick>:
=======
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fcef 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fe80 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023c00 	.word	0x40023c00

0800112c <HAL_InitTick>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fb89 	bl	8001856 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
=======
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fcf9 	bl	8001b42 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 fb5f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
=======
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fccf 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
=======
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000330 	.word	0x20000330

080011a8 <HAL_GetTick>:
=======
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000330 	.word	0x20000330

080011b4 <HAL_GetTick>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000330 	.word	0x20000330

080011c0 <HAL_ADC_Init>:
=======
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000330 	.word	0x20000330

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_ADC_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e033      	b.n	800123e <HAL_ADC_Init+0x7e>
=======
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e033      	b.n	8001292 <HAL_ADC_Init+0x7e>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_ADC_Init+0x32>
=======
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_ADC_Init+0x32>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe40 	bl	8000e64 <HAL_ADC_MspInit>
=======
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe1c 	bl	8000e70 <HAL_ADC_MspInit>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d118      	bne.n	8001284 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800125a:	f023 0302 	bic.w	r3, r3, #2
 800125e:	f043 0202 	orr.w	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f94a 	bl	80014ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	e001      	b.n	8001234 <HAL_ADC_Init+0x74>
=======
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fa96 	bl	8001798 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
 8001282:	e001      	b.n	8001288 <HAL_ADC_Init+0x74>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
=======
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_ADC_ConfigChannel>:
=======
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_Start+0x1a>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e097      	b.n	80013e6 <HAL_ADC_Start+0x14a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d018      	beq.n	80012fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_ADC_Start+0x158>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <HAL_ADC_Start+0x15c>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9a      	lsrs	r2, r3, #18
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d15f      	bne.n	80013cc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134a:	d106      	bne.n	800135a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f023 0206 	bic.w	r2, r3, #6
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_ADC_Start+0x160>)
 800136a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001374:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d129      	bne.n	80013e4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	e020      	b.n	80013e4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_ADC_Start+0x164>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d11b      	bne.n	80013e4 <HAL_ADC_Start+0x148>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d114      	bne.n	80013e4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	e00b      	b.n	80013e4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f043 0210 	orr.w	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000
 80013f8:	431bde83 	.word	0x431bde83
 80013fc:	40012300 	.word	0x40012300
 8001400:	40012000 	.word	0x40012000

08001404 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001420:	d113      	bne.n	800144a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800142c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001430:	d10b      	bne.n	800144a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f043 0220 	orr.w	r2, r3, #32
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e063      	b.n	8001512 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800144a:	f7ff feb3 	bl	80011b4 <HAL_GetTick>
 800144e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001450:	e021      	b.n	8001496 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d01d      	beq.n	8001496 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_ADC_PollForConversion+0x6c>
 8001460:	f7ff fea8 	bl	80011b4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d212      	bcs.n	8001496 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d00b      	beq.n	8001496 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f043 0204 	orr.w	r2, r3, #4
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e03d      	b.n	8001512 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d1d6      	bne.n	8001452 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0212 	mvn.w	r2, #18
 80014ac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d123      	bne.n	8001510 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d11f      	bne.n	8001510 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_ADC_ConfigChannel>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
=======
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1c>
 8001260:	2302      	movs	r3, #2
 8001262:	e113      	b.n	800148c <HAL_ADC_ConfigChannel+0x244>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d925      	bls.n	80012c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43da      	mvns	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	400a      	ands	r2, r1
 8001298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68d9      	ldr	r1, [r3, #12]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4403      	add	r3, r0
 80012b2:	3b1e      	subs	r3, #30
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	e022      	b.n	8001306 <HAL_ADC_ConfigChannel+0xbe>
=======
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1c>
 800154c:	2302      	movs	r3, #2
 800154e:	e113      	b.n	8001778 <HAL_ADC_ConfigChannel+0x244>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d925      	bls.n	80015ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	3b1e      	subs	r3, #30
 8001576:	2207      	movs	r2, #7
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4403      	add	r3, r0
 800159e:	3b1e      	subs	r3, #30
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	e022      	b.n	80015f2 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6919      	ldr	r1, [r3, #16]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	2207      	movs	r2, #7
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4403      	add	r3, r0
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	611a      	str	r2, [r3, #16]
=======
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	2207      	movs	r2, #7
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4403      	add	r3, r0
 80015e8:	409a      	lsls	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	611a      	str	r2, [r3, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d824      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b05      	subs	r3, #5
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b05      	subs	r3, #5
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	e04c      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d824      	bhi.n	80013aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b23      	subs	r3, #35	; 0x23
 8001372:	221f      	movs	r2, #31
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43da      	mvns	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b23      	subs	r3, #35	; 0x23
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	e023      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
=======
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d824      	bhi.n	8001644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b05      	subs	r3, #5
 800160c:	221f      	movs	r2, #31
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
 8001642:	e04c      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d824      	bhi.n	8001696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b23      	subs	r3, #35	; 0x23
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43da      	mvns	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	400a      	ands	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b23      	subs	r3, #35	; 0x23
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	e023      	b.n	80016de <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b41      	subs	r3, #65	; 0x41
 80013bc:	221f      	movs	r2, #31
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b41      	subs	r3, #65	; 0x41
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b41      	subs	r3, #65	; 0x41
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	400a      	ands	r2, r1
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b41      	subs	r3, #65	; 0x41
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_ADC_ConfigChannel+0x250>)
 80013f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <HAL_ADC_ConfigChannel+0x254>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d10f      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1d8>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d10b      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1d8>
=======
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_ADC_ConfigChannel+0x250>)
 80016e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a28      	ldr	r2, [pc, #160]	; (8001788 <HAL_ADC_ConfigChannel+0x254>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10f      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
=======
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	605a      	str	r2, [r3, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_ADC_ConfigChannel+0x254>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x23a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <HAL_ADC_ConfigChannel+0x258>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d003      	beq.n	800143c <HAL_ADC_ConfigChannel+0x1f4>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b11      	cmp	r3, #17
 800143a:	d122      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x23a>
=======
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_ADC_ConfigChannel+0x254>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <HAL_ADC_ConfigChannel+0x258>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x1f4>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b11      	cmp	r3, #17
 8001726:	d122      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_ADC_ConfigChannel+0x258>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d111      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x23a>
=======
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_ConfigChannel+0x258>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_ADC_ConfigChannel+0x260>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x22e>
=======
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_ADC_ConfigChannel+0x25c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_ADC_ConfigChannel+0x260>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9a      	lsrs	r2, r3, #18
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	10000012 	.word	0x10000012
 80014a4:	20000000 	.word	0x20000000
 80014a8:	431bde83 	.word	0x431bde83

080014ac <ADC_Init>:
=======
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40012300 	.word	0x40012300
 8001788:	40012000 	.word	0x40012000
 800178c:	10000012 	.word	0x10000012
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <ADC_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
=======
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80014b4:	4b79      	ldr	r3, [pc, #484]	; (800169c <ADC_Init+0x1f0>)
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	021a      	lsls	r2, r3, #8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6899      	ldr	r1, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
=======
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <ADC_Init+0x1f0>)
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <ADC_Init+0x1f4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d022      	beq.n	800158a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6899      	ldr	r1, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6899      	ldr	r1, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e00f      	b.n	80015aa <ADC_Init+0xfe>
=======
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <ADC_Init+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	e00f      	b.n	8001896 <ADC_Init+0xfe>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a8:	609a      	str	r2, [r3, #8]
=======
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0202 	bic.w	r2, r2, #2
 80015b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	005a      	lsls	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <ADC_Init+0x164>
=======
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0202 	bic.w	r2, r2, #2
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <ADC_Init+0x164>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	3b01      	subs	r3, #1
 8001604:	035a      	lsls	r2, r3, #13
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	e007      	b.n	8001620 <ADC_Init+0x174>
=======
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	035a      	lsls	r2, r3, #13
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e007      	b.n	800190c <ADC_Init+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161e:	605a      	str	r2, [r3, #4]
=======
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	605a      	str	r2, [r3, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	3b01      	subs	r3, #1
 800163c:	051a      	lsls	r2, r3, #20
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001662:	025a      	lsls	r2, r3, #9
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6899      	ldr	r1, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	029a      	lsls	r2, r3, #10
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	609a      	str	r2, [r3, #8]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40012300 	.word	0x40012300
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <__NVIC_SetPriorityGrouping>:
=======
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	3b01      	subs	r3, #1
 8001928:	051a      	lsls	r2, r3, #20
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800194e:	025a      	lsls	r2, r3, #9
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	029a      	lsls	r2, r3, #10
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	0f000001 	.word	0x0f000001

08001990 <__NVIC_SetPriorityGrouping>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
=======
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_SetPriority>:
=======
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_SetPriority>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
=======
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
=======
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
=======
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
=======
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff47 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
=======
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff47 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
=======
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001830:	f7ff ff5c 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
=======
 8001b1c:	f7ff ff5c 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
=======
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffb0 	bl	8001ab0 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
=======
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e159      	b.n	8001b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 8148 	bne.w	8001b3a <HAL_GPIO_Init+0x2ca>
=======
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e159      	b.n	8001e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8148 	bne.w	8001e26 <HAL_GPIO_Init+0x2ca>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb4>
=======
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf0>
=======
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
=======
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
=======
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
=======
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a2 	beq.w	8001b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a49      	ldr	r2, [pc, #292]	; (8001b60 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x202>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_GPIO_Init+0x2f4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x1fe>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_GPIO_Init+0x2fc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x1f6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x1f2>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e008      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a66:	2303      	movs	r3, #3
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a72:	2300      	movs	r3, #0
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f002 0203 	and.w	r2, r2, #3
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a84:	4935      	ldr	r1, [pc, #212]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	f67f aea2 	bls.w	800188c <HAL_GPIO_Init+0x1c>
=======
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a2 	beq.w	8001e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a56      	ldr	r2, [pc, #344]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x202>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1fe>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1f6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_GPIO_Init+0x300>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1f2>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_GPIO_Init+0x304>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f aea2 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
  }
}
<<<<<<< HEAD
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <HAL_GPIO_WritePin>:
=======
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_WritePin>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
=======
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
=======
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_RCC_OscConfig>:
=======
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_RCC_OscConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
=======
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e267      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
=======
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e267      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d075      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
=======
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b82      	ldr	r3, [pc, #520]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bee:	d10b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d05b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x108>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d157      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e242      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
=======
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d112      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b7e      	ldr	r3, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e242      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d106      	bne.n	8001c20 <HAL_RCC_OscConfig+0x74>
 8001c12:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a75      	ldr	r2, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e01d      	b.n	8001c5c <HAL_RCC_OscConfig+0xb0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x98>
 8001c2a:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6f      	ldr	r2, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6c      	ldr	r2, [pc, #432]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xb0>
 8001c44:	4b69      	ldr	r3, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a68      	ldr	r2, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff faa0 	bl	80011a8 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fa9c 	bl	80011a8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e207      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0xc0>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
=======
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6f      	ldr	r2, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6d      	ldr	r3, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6c      	ldr	r2, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b69      	ldr	r3, [pc, #420]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a68      	ldr	r2, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f930 	bl	80011b4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f92c 	bl	80011b4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e207      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001c8c:	f7ff fa8c 	bl	80011a8 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fa88 	bl	80011a8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1f3      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	4b51      	ldr	r3, [pc, #324]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0xe8>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
=======
 8001f78:	f7ff f91c 	bl	80011b4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f918 	bl	80011b4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1f3      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1de>
=======
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x1de>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d11c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_RCC_OscConfig+0x152>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1c7      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
=======
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c7      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	e03a      	b.n	8001d8a <HAL_RCC_OscConfig+0x1de>
=======
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4937      	ldr	r1, [pc, #220]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x244>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff fa41 	bl	80011a8 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fa3d 	bl	80011a8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1a8      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17e>
=======
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCC_OscConfig+0x244>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f8d1 	bl	80011b4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff f8cd 	bl	80011b4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a8      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4925      	ldr	r1, [pc, #148]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x1de>
=======
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4925      	ldr	r1, [pc, #148]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_OscConfig+0x244>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa20 	bl	80011a8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fa1c 	bl	80011a8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e187      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1c0>
=======
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_OscConfig+0x244>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f8b0 	bl	80011b4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff f8ac 	bl	80011b4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e187      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d036      	beq.n	8001e04 <HAL_RCC_OscConfig+0x258>
=======
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d036      	beq.n	80020f0 <HAL_RCC_OscConfig+0x258>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x248>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fa00 	bl	80011a8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff f9fc 	bl	80011a8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e167      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x200>
 8001dca:	e01b      	b.n	8001e04 <HAL_RCC_OscConfig+0x258>
=======
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_RCC_OscConfig+0x248>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f890 	bl	80011b4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f88c 	bl	80011b4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e167      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x258>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x248>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f9e9 	bl	80011a8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	e00e      	b.n	8001df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff f9e5 	bl	80011a8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d907      	bls.n	8001df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e150      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	42470000 	.word	0x42470000
 8001df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ea      	bne.n	8001dda <HAL_RCC_OscConfig+0x22e>
=======
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_OscConfig+0x248>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff f879 	bl	80011b4 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00e      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff f875 	bl	80011b4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d907      	bls.n	80020e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e150      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ea      	bne.n	80020c6 <HAL_RCC_OscConfig+0x22e>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8097 	beq.w	8001f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]
=======
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8097 	beq.w	800222c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8001e16:	4b81      	ldr	r3, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a7c      	ldr	r2, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b77      	ldr	r3, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4e:	4b74      	ldr	r3, [pc, #464]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f9a5 	bl	80011a8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7ff f9a1 	bl	80011a8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e10c      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2b6>
=======
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a7c      	ldr	r2, [pc, #496]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b77      	ldr	r3, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b74      	ldr	r3, [pc, #464]	; (800230c <HAL_RCC_OscConfig+0x474>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a73      	ldr	r2, [pc, #460]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7ff f835 	bl	80011b4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7ff f831 	bl	80011b4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e10c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2b6>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2ea>
 8001e88:	4b64      	ldr	r3, [pc, #400]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	e01c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x324>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x30c>
 8001e9e:	4b5f      	ldr	r3, [pc, #380]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	4b5c      	ldr	r3, [pc, #368]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x324>
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	4b55      	ldr	r3, [pc, #340]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 0304 	bic.w	r3, r3, #4
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f966 	bl	80011a8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f962 	bl	80011a8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0cb      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0ee      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x334>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x382>
=======
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x2ea>
 8002174:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a63      	ldr	r2, [pc, #396]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x30c>
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a5e      	ldr	r2, [pc, #376]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a57      	ldr	r2, [pc, #348]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b55      	ldr	r3, [pc, #340]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe fff6 	bl	80011b4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe fff2 	bl	80011b4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0cb      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x382>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001f04:	f7ff f950 	bl	80011a8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f94c 	bl	80011a8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0b5      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_RCC_OscConfig+0x360>
=======
 80021f0:	f7fe ffe0 	bl	80011b4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffdc 	bl	80011b4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0b5      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x360>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a1 	beq.w	800208c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d05c      	beq.n	8002010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d141      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x436>
=======
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a1 	beq.w	8002378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d05c      	beq.n	80022fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d141      	bne.n	80022ce <HAL_RCC_OscConfig+0x436>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f920 	bl	80011a8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff f91c 	bl	80011a8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e087      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
=======
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ffb0 	bl	80011b4 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe ffac 	bl	80011b4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e087      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	019b      	lsls	r3, r3, #6
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	491b      	ldr	r1, [pc, #108]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
=======
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	491b      	ldr	r1, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff f8f5 	bl	80011a8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff f8f1 	bl	80011a8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e05c      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x416>
 8001fe0:	e054      	b.n	800208c <HAL_RCC_OscConfig+0x4e0>
=======
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe ff85 	bl	80011b4 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe ff81 	bl	80011b4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e05c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x416>
 80022cc:	e054      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8de 	bl	80011a8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f8da 	bl	80011a8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e045      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x444>
 800200e:	e03d      	b.n	800208c <HAL_RCC_OscConfig+0x4e0>
=======
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe ff6e 	bl	80011b4 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe ff6a 	bl	80011b4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e045      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e038      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000
 8002024:	42470060 	.word	0x42470060
=======
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e038      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	42470060 	.word	0x42470060
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4ec>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60fb      	str	r3, [r7, #12]
=======
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4ec>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d028      	beq.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d121      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11a      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800205e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002060:	4293      	cmp	r3, r2
 8002062:	d111      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
=======
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d028      	beq.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d121      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d111      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_RCC_ClockConfig>:
=======
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_RCC_ClockConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
=======
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0cc      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90c      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
=======
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x8a>
=======
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002112:	6093      	str	r3, [r2, #8]
=======
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
=======
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d044      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
=======
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d119      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e067      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7ff f80c 	bl	80011a8 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff f808 	bl	80011a8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e04f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
=======
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe9c 	bl	80011b4 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fe98 	bl	80011b4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
=======
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
=======
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
=======
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
=======
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ff6c 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00
 8002258:	40023800 	.word	0x40023800
 800225c:	08003c80 	.word	0x08003c80
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
=======
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fdfc 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08003f6c 	.word	0x08003f6c
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b090      	sub	sp, #64	; 0x40
 800226e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d00d      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 800228c:	2b08      	cmp	r3, #8
 800228e:	f200 80a1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b090      	sub	sp, #64	; 0x40
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
 8002560:	2300      	movs	r3, #0
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	2300      	movs	r3, #0
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00d      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 8002578:	2b08      	cmp	r3, #8
 800257a:	f200 80a1 	bhi.w	80026c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x3a>
 8002586:	e09b      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022a0:	e09b      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
=======
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800258c:	e09b      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022a6:	e098      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
=======
 800258e:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002592:	e098      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 80022a8:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2200      	movs	r2, #0
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d0:	2100      	movs	r1, #0
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d4:	fb03 f201 	mul.w	r2, r3, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	4413      	add	r3, r2
 80022e0:	4a43      	ldr	r2, [pc, #268]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e2:	fba0 1202 	umull	r1, r2, r0, r2
 80022e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e8:	460a      	mov	r2, r1
 80022ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80022ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	2200      	movs	r2, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	61fa      	str	r2, [r7, #28]
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002302:	f7fd ffbd 	bl	8000280 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230e:	e053      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x150>
=======
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	2200      	movs	r2, #0
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	627a      	str	r2, [r7, #36]	; 0x24
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025bc:	2100      	movs	r1, #0
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_GetSysClockFreq+0x188>)
 80025c0:	fb03 f201 	mul.w	r2, r3, r1
 80025c4:	2300      	movs	r3, #0
 80025c6:	fb00 f303 	mul.w	r3, r0, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	4a43      	ldr	r2, [pc, #268]	; (80026dc <HAL_RCC_GetSysClockFreq+0x188>)
 80025ce:	fba0 1202 	umull	r1, r2, r0, r2
 80025d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d4:	460a      	mov	r2, r1
 80025d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	4413      	add	r3, r2
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	2200      	movs	r2, #0
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	61fa      	str	r2, [r7, #28]
 80025e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025ee:	f7fd fe47 	bl	8000280 <__aeabi_uldivmod>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4613      	mov	r3, r2
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fa:	e053      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	617a      	str	r2, [r7, #20]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002322:	f04f 0b00 	mov.w	fp, #0
 8002326:	4652      	mov	r2, sl
 8002328:	465b      	mov	r3, fp
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ebb2 080a 	subs.w	r8, r2, sl
 8002342:	eb63 090b 	sbc.w	r9, r3, fp
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235a:	ebb2 0408 	subs.w	r4, r2, r8
 800235e:	eb63 0509 	sbc.w	r5, r3, r9
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	00eb      	lsls	r3, r5, #3
 800236c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002370:	00e2      	lsls	r2, r4, #3
 8002372:	4614      	mov	r4, r2
 8002374:	461d      	mov	r5, r3
 8002376:	eb14 030a 	adds.w	r3, r4, sl
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	eb45 030b 	adc.w	r3, r5, fp
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	2200      	movs	r2, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	f7fd ff68 	bl	8000280 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
=======
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	2200      	movs	r2, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	617a      	str	r2, [r7, #20]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800260e:	f04f 0b00 	mov.w	fp, #0
 8002612:	4652      	mov	r2, sl
 8002614:	465b      	mov	r3, fp
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	0159      	lsls	r1, r3, #5
 8002620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002624:	0150      	lsls	r0, r2, #5
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	ebb2 080a 	subs.w	r8, r2, sl
 800262e:	eb63 090b 	sbc.w	r9, r3, fp
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800263e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002642:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002646:	ebb2 0408 	subs.w	r4, r2, r8
 800264a:	eb63 0509 	sbc.w	r5, r3, r9
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	00eb      	lsls	r3, r5, #3
 8002658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265c:	00e2      	lsls	r2, r4, #3
 800265e:	4614      	mov	r4, r2
 8002660:	461d      	mov	r5, r3
 8002662:	eb14 030a 	adds.w	r3, r4, sl
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	eb45 030b 	adc.w	r3, r5, fp
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267a:	4629      	mov	r1, r5
 800267c:	028b      	lsls	r3, r1, #10
 800267e:	4621      	mov	r1, r4
 8002680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002684:	4621      	mov	r1, r4
 8002686:	028a      	lsls	r2, r1, #10
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	2200      	movs	r2, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	60fa      	str	r2, [r7, #12]
 8002694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002698:	f7fd fdf2 	bl	8000280 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4613      	mov	r3, r2
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3740      	adds	r7, #64	; 0x40
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	017d7840 	.word	0x017d7840

080023f4 <HAL_TIM_Base_Init>:
=======
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3740      	adds	r7, #64	; 0x40
 80026cc:	46bd      	mov	sp, r7
 80026ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	017d7840 	.word	0x017d7840

080026e0 <HAL_TIM_Base_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e041      	b.n	800248a <HAL_TIM_Base_Init+0x96>
=======
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e041      	b.n	8002776 <HAL_TIM_Base_Init+0x96>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fd66 	bl	8000eec <HAL_TIM_Base_MspInit>
=======
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fbf6 	bl	8000ef8 <HAL_TIM_Base_MspInit>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fac0 	bl	80029b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_TIM_PWM_Init>:
=======
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 fac0 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_TIM_PWM_Init>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e041      	b.n	8002528 <HAL_TIM_PWM_Init+0x96>
=======
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e041      	b.n	8002814 <HAL_TIM_PWM_Init+0x96>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f839 	bl	8002530 <HAL_TIM_PWM_MspInit>
=======
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f839 	bl	800281c <HAL_TIM_PWM_MspInit>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f000 fa71 	bl	80029b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_PWM_MspInit>:
=======
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 fa71 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_PWM_MspInit>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
=======
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_PWM_Start>:
=======
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_PWM_Start>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
=======
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_TIM_PWM_Start+0x24>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e022      	b.n	80025ae <HAL_TIM_PWM_Start+0x6a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d109      	bne.n	8002582 <HAL_TIM_PWM_Start+0x3e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e015      	b.n	80025ae <HAL_TIM_PWM_Start+0x6a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d109      	bne.n	800259c <HAL_TIM_PWM_Start+0x58>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e008      	b.n	80025ae <HAL_TIM_PWM_Start+0x6a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e068      	b.n	8002688 <HAL_TIM_PWM_Start+0x144>
=======
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_TIM_PWM_Start+0x24>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e022      	b.n	800289a <HAL_TIM_PWM_Start+0x6a>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d109      	bne.n	800286e <HAL_TIM_PWM_Start+0x3e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e015      	b.n	800289a <HAL_TIM_PWM_Start+0x6a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d109      	bne.n	8002888 <HAL_TIM_PWM_Start+0x58>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e008      	b.n	800289a <HAL_TIM_PWM_Start+0x6a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e068      	b.n	8002974 <HAL_TIM_PWM_Start+0x144>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x82>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c4:	e013      	b.n	80025ee <HAL_TIM_PWM_Start+0xaa>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d104      	bne.n	80025d6 <HAL_TIM_PWM_Start+0x92>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d4:	e00b      	b.n	80025ee <HAL_TIM_PWM_Start+0xaa>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_PWM_Start+0xa2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	e003      	b.n	80025ee <HAL_TIM_PWM_Start+0xaa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2201      	movs	r2, #1
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fc84 	bl	8002f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_TIM_PWM_Start+0x14c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d107      	bne.n	8002616 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0x82>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b0:	e013      	b.n	80028da <HAL_TIM_PWM_Start+0xaa>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0x92>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c0:	e00b      	b.n	80028da <HAL_TIM_PWM_Start+0xaa>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xa2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d0:	e003      	b.n	80028da <HAL_TIM_PWM_Start+0xaa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fc84 	bl	80031f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_TIM_PWM_Start+0x14c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d107      	bne.n	8002902 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_TIM_PWM_Start+0x14c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_TIM_PWM_Start+0x10e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d013      	beq.n	8002652 <HAL_TIM_PWM_Start+0x10e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_TIM_PWM_Start+0x150>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_TIM_PWM_Start+0x10e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_TIM_PWM_Start+0x154>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIM_PWM_Start+0x10e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_PWM_Start+0x158>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIM_PWM_Start+0x10e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_TIM_PWM_Start+0x15c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d111      	bne.n	8002676 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d010      	beq.n	8002686 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	e007      	b.n	8002686 <HAL_TIM_PWM_Start+0x142>
=======
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_TIM_PWM_Start+0x14c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d018      	beq.n	800293e <HAL_TIM_PWM_Start+0x10e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d013      	beq.n	800293e <HAL_TIM_PWM_Start+0x10e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_TIM_PWM_Start+0x150>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_TIM_PWM_Start+0x10e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_TIM_PWM_Start+0x154>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_TIM_PWM_Start+0x10e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_TIM_PWM_Start+0x158>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_TIM_PWM_Start+0x10e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_TIM_PWM_Start+0x15c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d010      	beq.n	8002972 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	e007      	b.n	8002972 <HAL_TIM_PWM_Start+0x142>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
=======
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40010000 	.word	0x40010000
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000

080026a4 <HAL_TIM_PWM_ConfigChannel>:
=======
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40010000 	.word	0x40010000
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40014000 	.word	0x40014000

08002990 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
=======
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	75fb      	strb	r3, [r7, #23]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ae      	b.n	8002820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	f200 809f 	bhi.w	8002810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026d2:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002811 	.word	0x08002811
 80026e0:	08002811 	.word	0x08002811
 80026e4:	08002811 	.word	0x08002811
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	08002811 	.word	0x08002811
 80026f0:	08002811 	.word	0x08002811
 80026f4:	08002811 	.word	0x08002811
 80026f8:	0800278f 	.word	0x0800278f
 80026fc:	08002811 	.word	0x08002811
 8002700:	08002811 	.word	0x08002811
 8002704:	08002811 	.word	0x08002811
 8002708:	080027cf 	.word	0x080027cf
=======
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0ae      	b.n	8002b0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	f200 809f 	bhi.w	8002afc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002afd 	.word	0x08002afd
 80029cc:	08002afd 	.word	0x08002afd
 80029d0:	08002afd 	.word	0x08002afd
 80029d4:	08002a39 	.word	0x08002a39
 80029d8:	08002afd 	.word	0x08002afd
 80029dc:	08002afd 	.word	0x08002afd
 80029e0:	08002afd 	.word	0x08002afd
 80029e4:	08002a7b 	.word	0x08002a7b
 80029e8:	08002afd 	.word	0x08002afd
 80029ec:	08002afd 	.word	0x08002afd
 80029f0:	08002afd 	.word	0x08002afd
 80029f4:	08002abb 	.word	0x08002abb
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d0 	bl	8002ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	619a      	str	r2, [r3, #24]
      break;
 800274a:	e064      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f9d0 	bl	8002da4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	619a      	str	r2, [r3, #24]
      break;
 8002a36:	e064      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fa16 	bl	8002b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
      break;
 800278c:	e043      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa16 	bl	8002e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	619a      	str	r2, [r3, #24]
      break;
 8002a78:	e043      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa61 	bl	8002c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0208 	orr.w	r2, r2, #8
 80027a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0204 	bic.w	r2, r2, #4
 80027b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69d9      	ldr	r1, [r3, #28]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]
      break;
 80027cc:	e023      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa61 	bl	8002f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0208 	orr.w	r2, r2, #8
 8002a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0204 	bic.w	r2, r2, #4
 8002aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69d9      	ldr	r1, [r3, #28]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
      break;
 8002ab8:	e023      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 faab 	bl	8002d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69d9      	ldr	r1, [r3, #28]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	61da      	str	r2, [r3, #28]
      break;
 800280e:	e002      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 faab 	bl	800301c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8002810:	2301      	movs	r3, #1
 8002812:	75fb      	strb	r3, [r7, #23]
      break;
 8002814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_ConfigClockSource>:
=======
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
      break;
 8002b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_ConfigClockSource>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
=======
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0x1c>
 8002840:	2302      	movs	r3, #2
 8002842:	e0b4      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x186>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0b4      	b.n	8002c9a <HAL_TIM_ConfigClockSource+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d03e      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0xd4>
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	f200 8087 	bhi.w	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	f000 8086 	beq.w	800299a <HAL_TIM_ConfigClockSource+0x172>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d87f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d01a      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xa6>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d87b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d050      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x11a>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d877      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d03c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xfa>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d873      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d058      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x13a>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d86f      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d064      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d86b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d060      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d867      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d05a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	e062      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b68:	d03e      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6e:	f200 8087 	bhi.w	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	f000 8086 	beq.w	8002c86 <HAL_TIM_ConfigClockSource+0x172>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d87f      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d01a      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0xa6>
 8002b84:	2b70      	cmp	r3, #112	; 0x70
 8002b86:	d87b      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b60      	cmp	r3, #96	; 0x60
 8002b8a:	d050      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x11a>
 8002b8c:	2b60      	cmp	r3, #96	; 0x60
 8002b8e:	d877      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b50      	cmp	r3, #80	; 0x50
 8002b92:	d03c      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xfa>
 8002b94:	2b50      	cmp	r3, #80	; 0x50
 8002b96:	d873      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d058      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x13a>
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d86f      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b30      	cmp	r3, #48	; 0x30
 8002ba2:	d064      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	2b30      	cmp	r3, #48	; 0x30
 8002ba6:	d86b      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d060      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d867      	bhi.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d05a      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb8:	e062      	b.n	8002c80 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f000 faf1 	bl	8002ec4 <TIM_ETR_SetConfig>
=======
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f000 faf1 	bl	80031b0 <TIM_ETR_SetConfig>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	609a      	str	r2, [r3, #8]
      break;
 80028fa:	e04f      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
      break;
 8002be6:	e04f      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f000 fada 	bl	8002ec4 <TIM_ETR_SetConfig>
=======
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f000 fada 	bl	80031b0 <TIM_ETR_SetConfig>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291e:	609a      	str	r2, [r3, #8]
      break;
 8002920:	e03c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0a:	609a      	str	r2, [r3, #8]
      break;
 8002c0c:	e03c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 fa4e 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2150      	movs	r1, #80	; 0x50
 800293a:	4618      	mov	r0, r3
 800293c:	f000 faa7 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002940:	e02c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f000 fa4e 	bl	80030bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2150      	movs	r1, #80	; 0x50
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 faa7 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002c2c:	e02c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 fa6d 	bl	8002e2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2160      	movs	r1, #96	; 0x60
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fa97 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002960:	e01c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 fa6d 	bl	800311a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2160      	movs	r1, #96	; 0x60
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fa97 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e01c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 fa2e 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fa87 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002980:	e00c      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 fa2e 	bl	80030bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fa87 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e00c      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 fa7e 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002992:	e003      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
=======
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f000 fa7e 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002c7e:	e003      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e000      	b.n	800299c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800299a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <TIM_Base_SetConfig>:
=======
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      break;
 8002c84:	e000      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <TIM_Base_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <TIM_Base_SetConfig+0xe4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00f      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <TIM_Base_SetConfig+0xe8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a30      	ldr	r2, [pc, #192]	; (8002aa4 <TIM_Base_SetConfig+0xec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <TIM_Base_SetConfig+0xf0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <TIM_Base_SetConfig+0xe4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01b      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d017      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <TIM_Base_SetConfig+0xe8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <TIM_Base_SetConfig+0xec>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00f      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <TIM_Base_SetConfig+0xf0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <TIM_Base_SetConfig+0xf4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <TIM_Base_SetConfig+0xf8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <TIM_Base_SetConfig+0xfc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d108      	bne.n	8002a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
=======
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00f      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d00b      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a31      	ldr	r2, [pc, #196]	; (8002d8c <TIM_Base_SetConfig+0xe8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <TIM_Base_SetConfig+0xec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x38>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <TIM_Base_SetConfig+0xf0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <TIM_Base_SetConfig+0xe8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <TIM_Base_SetConfig+0xec>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <TIM_Base_SetConfig+0xf0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <TIM_Base_SetConfig+0xf4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <TIM_Base_SetConfig+0xf8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x8a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <TIM_Base_SetConfig+0xfc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <TIM_Base_SetConfig+0xe4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d103      	bne.n	8002a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <TIM_Base_SetConfig+0xe4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	615a      	str	r2, [r3, #20]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800

08002ab8 <TIM_OC1_SetConfig>:
=======
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800

08002da4 <TIM_OC1_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
=======
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0201 	bic.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <TIM_OC1_SetConfig+0xc8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10c      	bne.n	8002b2e <TIM_OC1_SetConfig+0x76>
=======
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0201 	bic.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0302 	bic.w	r3, r3, #2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <TIM_OC1_SetConfig+0xc8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <TIM_OC1_SetConfig+0x76>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0308 	bic.w	r3, r3, #8
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <TIM_OC1_SetConfig+0xc8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <TIM_OC1_SetConfig+0xa2>
=======
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0308 	bic.w	r3, r3, #8
 8002e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <TIM_OC1_SetConfig+0xc8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <TIM_OC1_SetConfig+0xa2>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
=======
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40010000 	.word	0x40010000

08002b84 <TIM_OC2_SetConfig>:
=======
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40010000 	.word	0x40010000

08002e70 <TIM_OC2_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
=======
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0210 	bic.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0320 	bic.w	r3, r3, #32
 8002bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <TIM_OC2_SetConfig+0xd4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10d      	bne.n	8002c00 <TIM_OC2_SetConfig+0x7c>
=======
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0210 	bic.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0320 	bic.w	r3, r3, #32
 8002eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <TIM_OC2_SetConfig+0xd4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10d      	bne.n	8002eec <TIM_OC2_SetConfig+0x7c>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	617b      	str	r3, [r7, #20]
=======
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eea:	617b      	str	r3, [r7, #20]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <TIM_OC2_SetConfig+0xd4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d113      	bne.n	8002c30 <TIM_OC2_SetConfig+0xac>
=======
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <TIM_OC2_SetConfig+0xd4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d113      	bne.n	8002f1c <TIM_OC2_SetConfig+0xac>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
=======
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000

08002c5c <TIM_OC3_SetConfig>:
=======
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010000 	.word	0x40010000

08002f48 <TIM_OC3_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
=======
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <TIM_OC3_SetConfig+0xd0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10d      	bne.n	8002cd6 <TIM_OC3_SetConfig+0x7a>
=======
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <TIM_OC3_SetConfig+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <TIM_OC3_SetConfig+0x7a>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <TIM_OC3_SetConfig+0xd0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <TIM_OC3_SetConfig+0xaa>
=======
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <TIM_OC3_SetConfig+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d113      	bne.n	8002ff2 <TIM_OC3_SetConfig+0xaa>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
=======
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40010000 	.word	0x40010000

08002d30 <TIM_OC4_SetConfig>:
=======
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40010000 	.word	0x40010000

0800301c <TIM_OC4_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
=======
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	031b      	lsls	r3, r3, #12
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <TIM_OC4_SetConfig+0x9c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d109      	bne.n	8002da4 <TIM_OC4_SetConfig+0x74>
=======
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <TIM_OC4_SetConfig+0x9c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d109      	bne.n	8003090 <TIM_OC4_SetConfig+0x74>
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
=======
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40010000 	.word	0x40010000

08002dd0 <TIM_TI1_ConfigInputStage>:
=======
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000

080030bc <TIM_TI1_ConfigInputStage>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
=======
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 030a 	bic.w	r3, r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <TIM_TI2_ConfigInputStage>:
=======
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0201 	bic.w	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 030a 	bic.w	r3, r3, #10
 80030f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <TIM_TI2_ConfigInputStage>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
=======
 800311a:	b480      	push	{r7}
 800311c:	b087      	sub	sp, #28
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0210 	bic.w	r2, r3, #16
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	031b      	lsls	r3, r3, #12
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <TIM_ITRx_SetConfig>:
=======
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f023 0210 	bic.w	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <TIM_ITRx_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
=======
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f043 0307 	orr.w	r3, r3, #7
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_ETR_SetConfig>:
=======
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	f043 0307 	orr.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <TIM_ETR_SetConfig>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_CCxChannelCmd>:
=======
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	609a      	str	r2, [r3, #8]
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <TIM_CCxChannelCmd>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
=======
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2201      	movs	r2, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1a      	ldr	r2, [r3, #32]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2201      	movs	r2, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1a      	ldr	r2, [r3, #32]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	43db      	mvns	r3, r3
 8003212:	401a      	ands	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1a      	ldr	r2, [r3, #32]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
=======
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e050      	b.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d013      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a15      	ldr	r2, [pc, #84]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]
=======
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e050      	b.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d013      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a15      	ldr	r2, [pc, #84]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40014000 	.word	0x40014000

0800302c <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40014000 	.word	0x40014000

08003318 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
=======
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e03d      	b.n	80030c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e03d      	b.n	80033b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
=======
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <siprintf>:
 80030d0:	b40e      	push	{r1, r2, r3}
 80030d2:	b500      	push	{lr}
 80030d4:	b09c      	sub	sp, #112	; 0x70
 80030d6:	ab1d      	add	r3, sp, #116	; 0x74
 80030d8:	9002      	str	r0, [sp, #8]
 80030da:	9006      	str	r0, [sp, #24]
 80030dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <siprintf+0x38>)
 80030e2:	9107      	str	r1, [sp, #28]
 80030e4:	9104      	str	r1, [sp, #16]
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <siprintf+0x3c>)
 80030e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ec:	9105      	str	r1, [sp, #20]
 80030ee:	6800      	ldr	r0, [r0, #0]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	a902      	add	r1, sp, #8
 80030f4:	f000 f992 	bl	800341c <_svfiprintf_r>
 80030f8:	9b02      	ldr	r3, [sp, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	b01c      	add	sp, #112	; 0x70
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
 8003104:	b003      	add	sp, #12
 8003106:	4770      	bx	lr
 8003108:	20000058 	.word	0x20000058
 800310c:	ffff0208 	.word	0xffff0208

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000058 	.word	0x20000058

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 fc6a 	bl	8003a18 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003ccc 	.word	0x08003ccc
 8003168:	08003ccc 	.word	0x08003ccc
 800316c:	08003ccc 	.word	0x08003ccc
 8003170:	08003cd0 	.word	0x08003cd0

08003174 <__retarget_lock_acquire_recursive>:
 8003174:	4770      	bx	lr

08003176 <__retarget_lock_release_recursive>:
 8003176:	4770      	bx	lr

08003178 <_free_r>:
 8003178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800317a:	2900      	cmp	r1, #0
 800317c:	d044      	beq.n	8003208 <_free_r+0x90>
 800317e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003182:	9001      	str	r0, [sp, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f1a1 0404 	sub.w	r4, r1, #4
 800318a:	bfb8      	it	lt
 800318c:	18e4      	addlt	r4, r4, r3
 800318e:	f000 f8df 	bl	8003350 <__malloc_lock>
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <_free_r+0x94>)
 8003194:	9801      	ldr	r0, [sp, #4]
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	b933      	cbnz	r3, 80031a8 <_free_r+0x30>
 800319a:	6063      	str	r3, [r4, #4]
 800319c:	6014      	str	r4, [r2, #0]
 800319e:	b003      	add	sp, #12
 80031a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031a4:	f000 b8da 	b.w	800335c <__malloc_unlock>
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	d908      	bls.n	80031be <_free_r+0x46>
 80031ac:	6825      	ldr	r5, [r4, #0]
 80031ae:	1961      	adds	r1, r4, r5
 80031b0:	428b      	cmp	r3, r1
 80031b2:	bf01      	itttt	eq
 80031b4:	6819      	ldreq	r1, [r3, #0]
 80031b6:	685b      	ldreq	r3, [r3, #4]
 80031b8:	1949      	addeq	r1, r1, r5
 80031ba:	6021      	streq	r1, [r4, #0]
 80031bc:	e7ed      	b.n	800319a <_free_r+0x22>
 80031be:	461a      	mov	r2, r3
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b10b      	cbz	r3, 80031c8 <_free_r+0x50>
 80031c4:	42a3      	cmp	r3, r4
 80031c6:	d9fa      	bls.n	80031be <_free_r+0x46>
 80031c8:	6811      	ldr	r1, [r2, #0]
 80031ca:	1855      	adds	r5, r2, r1
 80031cc:	42a5      	cmp	r5, r4
 80031ce:	d10b      	bne.n	80031e8 <_free_r+0x70>
 80031d0:	6824      	ldr	r4, [r4, #0]
 80031d2:	4421      	add	r1, r4
 80031d4:	1854      	adds	r4, r2, r1
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	d1e0      	bne.n	800319e <_free_r+0x26>
 80031dc:	681c      	ldr	r4, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	6053      	str	r3, [r2, #4]
 80031e2:	440c      	add	r4, r1
 80031e4:	6014      	str	r4, [r2, #0]
 80031e6:	e7da      	b.n	800319e <_free_r+0x26>
 80031e8:	d902      	bls.n	80031f0 <_free_r+0x78>
 80031ea:	230c      	movs	r3, #12
 80031ec:	6003      	str	r3, [r0, #0]
 80031ee:	e7d6      	b.n	800319e <_free_r+0x26>
 80031f0:	6825      	ldr	r5, [r4, #0]
 80031f2:	1961      	adds	r1, r4, r5
 80031f4:	428b      	cmp	r3, r1
 80031f6:	bf04      	itt	eq
 80031f8:	6819      	ldreq	r1, [r3, #0]
 80031fa:	685b      	ldreq	r3, [r3, #4]
 80031fc:	6063      	str	r3, [r4, #4]
 80031fe:	bf04      	itt	eq
 8003200:	1949      	addeq	r1, r1, r5
 8003202:	6021      	streq	r1, [r4, #0]
 8003204:	6054      	str	r4, [r2, #4]
 8003206:	e7ca      	b.n	800319e <_free_r+0x26>
 8003208:	b003      	add	sp, #12
 800320a:	bd30      	pop	{r4, r5, pc}
 800320c:	20000474 	.word	0x20000474

08003210 <sbrk_aligned>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4e0e      	ldr	r6, [pc, #56]	; (800324c <sbrk_aligned+0x3c>)
 8003214:	460c      	mov	r4, r1
 8003216:	6831      	ldr	r1, [r6, #0]
 8003218:	4605      	mov	r5, r0
 800321a:	b911      	cbnz	r1, 8003222 <sbrk_aligned+0x12>
 800321c:	f000 fba6 	bl	800396c <_sbrk_r>
 8003220:	6030      	str	r0, [r6, #0]
 8003222:	4621      	mov	r1, r4
 8003224:	4628      	mov	r0, r5
 8003226:	f000 fba1 	bl	800396c <_sbrk_r>
 800322a:	1c43      	adds	r3, r0, #1
 800322c:	d00a      	beq.n	8003244 <sbrk_aligned+0x34>
 800322e:	1cc4      	adds	r4, r0, #3
 8003230:	f024 0403 	bic.w	r4, r4, #3
 8003234:	42a0      	cmp	r0, r4
 8003236:	d007      	beq.n	8003248 <sbrk_aligned+0x38>
 8003238:	1a21      	subs	r1, r4, r0
 800323a:	4628      	mov	r0, r5
 800323c:	f000 fb96 	bl	800396c <_sbrk_r>
 8003240:	3001      	adds	r0, #1
 8003242:	d101      	bne.n	8003248 <sbrk_aligned+0x38>
 8003244:	f04f 34ff 	mov.w	r4, #4294967295
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	20000478 	.word	0x20000478

08003250 <_malloc_r>:
 8003250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003254:	1ccd      	adds	r5, r1, #3
 8003256:	f025 0503 	bic.w	r5, r5, #3
 800325a:	3508      	adds	r5, #8
 800325c:	2d0c      	cmp	r5, #12
 800325e:	bf38      	it	cc
 8003260:	250c      	movcc	r5, #12
 8003262:	2d00      	cmp	r5, #0
 8003264:	4607      	mov	r7, r0
 8003266:	db01      	blt.n	800326c <_malloc_r+0x1c>
 8003268:	42a9      	cmp	r1, r5
 800326a:	d905      	bls.n	8003278 <_malloc_r+0x28>
 800326c:	230c      	movs	r3, #12
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	2600      	movs	r6, #0
 8003272:	4630      	mov	r0, r6
 8003274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003278:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800334c <_malloc_r+0xfc>
 800327c:	f000 f868 	bl	8003350 <__malloc_lock>
 8003280:	f8d8 3000 	ldr.w	r3, [r8]
 8003284:	461c      	mov	r4, r3
 8003286:	bb5c      	cbnz	r4, 80032e0 <_malloc_r+0x90>
 8003288:	4629      	mov	r1, r5
 800328a:	4638      	mov	r0, r7
 800328c:	f7ff ffc0 	bl	8003210 <sbrk_aligned>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	4604      	mov	r4, r0
 8003294:	d155      	bne.n	8003342 <_malloc_r+0xf2>
 8003296:	f8d8 4000 	ldr.w	r4, [r8]
 800329a:	4626      	mov	r6, r4
 800329c:	2e00      	cmp	r6, #0
 800329e:	d145      	bne.n	800332c <_malloc_r+0xdc>
 80032a0:	2c00      	cmp	r4, #0
 80032a2:	d048      	beq.n	8003336 <_malloc_r+0xe6>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	4631      	mov	r1, r6
 80032a8:	4638      	mov	r0, r7
 80032aa:	eb04 0903 	add.w	r9, r4, r3
 80032ae:	f000 fb5d 	bl	800396c <_sbrk_r>
 80032b2:	4581      	cmp	r9, r0
 80032b4:	d13f      	bne.n	8003336 <_malloc_r+0xe6>
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	1a6d      	subs	r5, r5, r1
 80032ba:	4629      	mov	r1, r5
 80032bc:	4638      	mov	r0, r7
 80032be:	f7ff ffa7 	bl	8003210 <sbrk_aligned>
 80032c2:	3001      	adds	r0, #1
 80032c4:	d037      	beq.n	8003336 <_malloc_r+0xe6>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	442b      	add	r3, r5
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	f8d8 3000 	ldr.w	r3, [r8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d038      	beq.n	8003346 <_malloc_r+0xf6>
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	42a2      	cmp	r2, r4
 80032d8:	d12b      	bne.n	8003332 <_malloc_r+0xe2>
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e00f      	b.n	8003300 <_malloc_r+0xb0>
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	1b52      	subs	r2, r2, r5
 80032e4:	d41f      	bmi.n	8003326 <_malloc_r+0xd6>
 80032e6:	2a0b      	cmp	r2, #11
 80032e8:	d917      	bls.n	800331a <_malloc_r+0xca>
 80032ea:	1961      	adds	r1, r4, r5
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	6025      	str	r5, [r4, #0]
 80032f0:	bf18      	it	ne
 80032f2:	6059      	strne	r1, [r3, #4]
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	bf08      	it	eq
 80032f8:	f8c8 1000 	streq.w	r1, [r8]
 80032fc:	5162      	str	r2, [r4, r5]
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	4638      	mov	r0, r7
 8003302:	f104 060b 	add.w	r6, r4, #11
 8003306:	f000 f829 	bl	800335c <__malloc_unlock>
 800330a:	f026 0607 	bic.w	r6, r6, #7
 800330e:	1d23      	adds	r3, r4, #4
 8003310:	1af2      	subs	r2, r6, r3
 8003312:	d0ae      	beq.n	8003272 <_malloc_r+0x22>
 8003314:	1b9b      	subs	r3, r3, r6
 8003316:	50a3      	str	r3, [r4, r2]
 8003318:	e7ab      	b.n	8003272 <_malloc_r+0x22>
 800331a:	42a3      	cmp	r3, r4
 800331c:	6862      	ldr	r2, [r4, #4]
 800331e:	d1dd      	bne.n	80032dc <_malloc_r+0x8c>
 8003320:	f8c8 2000 	str.w	r2, [r8]
 8003324:	e7ec      	b.n	8003300 <_malloc_r+0xb0>
 8003326:	4623      	mov	r3, r4
 8003328:	6864      	ldr	r4, [r4, #4]
 800332a:	e7ac      	b.n	8003286 <_malloc_r+0x36>
 800332c:	4634      	mov	r4, r6
 800332e:	6876      	ldr	r6, [r6, #4]
 8003330:	e7b4      	b.n	800329c <_malloc_r+0x4c>
 8003332:	4613      	mov	r3, r2
 8003334:	e7cc      	b.n	80032d0 <_malloc_r+0x80>
 8003336:	230c      	movs	r3, #12
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4638      	mov	r0, r7
 800333c:	f000 f80e 	bl	800335c <__malloc_unlock>
 8003340:	e797      	b.n	8003272 <_malloc_r+0x22>
 8003342:	6025      	str	r5, [r4, #0]
 8003344:	e7dc      	b.n	8003300 <_malloc_r+0xb0>
 8003346:	605b      	str	r3, [r3, #4]
 8003348:	deff      	udf	#255	; 0xff
 800334a:	bf00      	nop
 800334c:	20000474 	.word	0x20000474

08003350 <__malloc_lock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_lock+0x8>)
 8003352:	f7ff bf0f 	b.w	8003174 <__retarget_lock_acquire_recursive>
 8003356:	bf00      	nop
 8003358:	20000470 	.word	0x20000470

0800335c <__malloc_unlock>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__malloc_unlock+0x8>)
 800335e:	f7ff bf0a 	b.w	8003176 <__retarget_lock_release_recursive>
 8003362:	bf00      	nop
 8003364:	20000470 	.word	0x20000470

08003368 <__ssputs_r>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	688e      	ldr	r6, [r1, #8]
 800336e:	461f      	mov	r7, r3
 8003370:	42be      	cmp	r6, r7
 8003372:	680b      	ldr	r3, [r1, #0]
 8003374:	4682      	mov	sl, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4690      	mov	r8, r2
 800337a:	d82c      	bhi.n	80033d6 <__ssputs_r+0x6e>
 800337c:	898a      	ldrh	r2, [r1, #12]
 800337e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003382:	d026      	beq.n	80033d2 <__ssputs_r+0x6a>
 8003384:	6965      	ldr	r5, [r4, #20]
 8003386:	6909      	ldr	r1, [r1, #16]
 8003388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800338c:	eba3 0901 	sub.w	r9, r3, r1
 8003390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003394:	1c7b      	adds	r3, r7, #1
 8003396:	444b      	add	r3, r9
 8003398:	106d      	asrs	r5, r5, #1
 800339a:	429d      	cmp	r5, r3
 800339c:	bf38      	it	cc
 800339e:	461d      	movcc	r5, r3
 80033a0:	0553      	lsls	r3, r2, #21
 80033a2:	d527      	bpl.n	80033f4 <__ssputs_r+0x8c>
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7ff ff53 	bl	8003250 <_malloc_r>
 80033aa:	4606      	mov	r6, r0
 80033ac:	b360      	cbz	r0, 8003408 <__ssputs_r+0xa0>
 80033ae:	6921      	ldr	r1, [r4, #16]
 80033b0:	464a      	mov	r2, r9
 80033b2:	f000 faeb 	bl	800398c <memcpy>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	6126      	str	r6, [r4, #16]
 80033c4:	6165      	str	r5, [r4, #20]
 80033c6:	444e      	add	r6, r9
 80033c8:	eba5 0509 	sub.w	r5, r5, r9
 80033cc:	6026      	str	r6, [r4, #0]
 80033ce:	60a5      	str	r5, [r4, #8]
 80033d0:	463e      	mov	r6, r7
 80033d2:	42be      	cmp	r6, r7
 80033d4:	d900      	bls.n	80033d8 <__ssputs_r+0x70>
 80033d6:	463e      	mov	r6, r7
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	4632      	mov	r2, r6
 80033dc:	4641      	mov	r1, r8
 80033de:	f000 faab 	bl	8003938 <memmove>
 80033e2:	68a3      	ldr	r3, [r4, #8]
 80033e4:	1b9b      	subs	r3, r3, r6
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	4433      	add	r3, r6
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	2000      	movs	r0, #0
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	462a      	mov	r2, r5
 80033f6:	f000 fad7 	bl	80039a8 <_realloc_r>
 80033fa:	4606      	mov	r6, r0
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d1e0      	bne.n	80033c2 <__ssputs_r+0x5a>
 8003400:	6921      	ldr	r1, [r4, #16]
 8003402:	4650      	mov	r0, sl
 8003404:	f7ff feb8 	bl	8003178 <_free_r>
 8003408:	230c      	movs	r3, #12
 800340a:	f8ca 3000 	str.w	r3, [sl]
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	e7e9      	b.n	80033f0 <__ssputs_r+0x88>

0800341c <_svfiprintf_r>:
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	4698      	mov	r8, r3
 8003422:	898b      	ldrh	r3, [r1, #12]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	b09d      	sub	sp, #116	; 0x74
 8003428:	4607      	mov	r7, r0
 800342a:	460d      	mov	r5, r1
 800342c:	4614      	mov	r4, r2
 800342e:	d50e      	bpl.n	800344e <_svfiprintf_r+0x32>
 8003430:	690b      	ldr	r3, [r1, #16]
 8003432:	b963      	cbnz	r3, 800344e <_svfiprintf_r+0x32>
 8003434:	2140      	movs	r1, #64	; 0x40
 8003436:	f7ff ff0b 	bl	8003250 <_malloc_r>
 800343a:	6028      	str	r0, [r5, #0]
 800343c:	6128      	str	r0, [r5, #16]
 800343e:	b920      	cbnz	r0, 800344a <_svfiprintf_r+0x2e>
 8003440:	230c      	movs	r3, #12
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	e0d0      	b.n	80035ec <_svfiprintf_r+0x1d0>
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	616b      	str	r3, [r5, #20]
 800344e:	2300      	movs	r3, #0
 8003450:	9309      	str	r3, [sp, #36]	; 0x24
 8003452:	2320      	movs	r3, #32
 8003454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003458:	f8cd 800c 	str.w	r8, [sp, #12]
 800345c:	2330      	movs	r3, #48	; 0x30
 800345e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003604 <_svfiprintf_r+0x1e8>
 8003462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003466:	f04f 0901 	mov.w	r9, #1
 800346a:	4623      	mov	r3, r4
 800346c:	469a      	mov	sl, r3
 800346e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003472:	b10a      	cbz	r2, 8003478 <_svfiprintf_r+0x5c>
 8003474:	2a25      	cmp	r2, #37	; 0x25
 8003476:	d1f9      	bne.n	800346c <_svfiprintf_r+0x50>
 8003478:	ebba 0b04 	subs.w	fp, sl, r4
 800347c:	d00b      	beq.n	8003496 <_svfiprintf_r+0x7a>
 800347e:	465b      	mov	r3, fp
 8003480:	4622      	mov	r2, r4
 8003482:	4629      	mov	r1, r5
 8003484:	4638      	mov	r0, r7
 8003486:	f7ff ff6f 	bl	8003368 <__ssputs_r>
 800348a:	3001      	adds	r0, #1
 800348c:	f000 80a9 	beq.w	80035e2 <_svfiprintf_r+0x1c6>
 8003490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003492:	445a      	add	r2, fp
 8003494:	9209      	str	r2, [sp, #36]	; 0x24
 8003496:	f89a 3000 	ldrb.w	r3, [sl]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a1 	beq.w	80035e2 <_svfiprintf_r+0x1c6>
 80034a0:	2300      	movs	r3, #0
 80034a2:	f04f 32ff 	mov.w	r2, #4294967295
 80034a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034aa:	f10a 0a01 	add.w	sl, sl, #1
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	9307      	str	r3, [sp, #28]
 80034b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034b6:	931a      	str	r3, [sp, #104]	; 0x68
 80034b8:	4654      	mov	r4, sl
 80034ba:	2205      	movs	r2, #5
 80034bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c0:	4850      	ldr	r0, [pc, #320]	; (8003604 <_svfiprintf_r+0x1e8>)
 80034c2:	f7fc fe8d 	bl	80001e0 <memchr>
 80034c6:	9a04      	ldr	r2, [sp, #16]
 80034c8:	b9d8      	cbnz	r0, 8003502 <_svfiprintf_r+0xe6>
 80034ca:	06d0      	lsls	r0, r2, #27
 80034cc:	bf44      	itt	mi
 80034ce:	2320      	movmi	r3, #32
 80034d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d4:	0711      	lsls	r1, r2, #28
 80034d6:	bf44      	itt	mi
 80034d8:	232b      	movmi	r3, #43	; 0x2b
 80034da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034de:	f89a 3000 	ldrb.w	r3, [sl]
 80034e2:	2b2a      	cmp	r3, #42	; 0x2a
 80034e4:	d015      	beq.n	8003512 <_svfiprintf_r+0xf6>
 80034e6:	9a07      	ldr	r2, [sp, #28]
 80034e8:	4654      	mov	r4, sl
 80034ea:	2000      	movs	r0, #0
 80034ec:	f04f 0c0a 	mov.w	ip, #10
 80034f0:	4621      	mov	r1, r4
 80034f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034f6:	3b30      	subs	r3, #48	; 0x30
 80034f8:	2b09      	cmp	r3, #9
 80034fa:	d94d      	bls.n	8003598 <_svfiprintf_r+0x17c>
 80034fc:	b1b0      	cbz	r0, 800352c <_svfiprintf_r+0x110>
 80034fe:	9207      	str	r2, [sp, #28]
 8003500:	e014      	b.n	800352c <_svfiprintf_r+0x110>
 8003502:	eba0 0308 	sub.w	r3, r0, r8
 8003506:	fa09 f303 	lsl.w	r3, r9, r3
 800350a:	4313      	orrs	r3, r2
 800350c:	9304      	str	r3, [sp, #16]
 800350e:	46a2      	mov	sl, r4
 8003510:	e7d2      	b.n	80034b8 <_svfiprintf_r+0x9c>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	1d19      	adds	r1, r3, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	9103      	str	r1, [sp, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	bfbb      	ittet	lt
 800351e:	425b      	neglt	r3, r3
 8003520:	f042 0202 	orrlt.w	r2, r2, #2
 8003524:	9307      	strge	r3, [sp, #28]
 8003526:	9307      	strlt	r3, [sp, #28]
 8003528:	bfb8      	it	lt
 800352a:	9204      	strlt	r2, [sp, #16]
 800352c:	7823      	ldrb	r3, [r4, #0]
 800352e:	2b2e      	cmp	r3, #46	; 0x2e
 8003530:	d10c      	bne.n	800354c <_svfiprintf_r+0x130>
 8003532:	7863      	ldrb	r3, [r4, #1]
 8003534:	2b2a      	cmp	r3, #42	; 0x2a
 8003536:	d134      	bne.n	80035a2 <_svfiprintf_r+0x186>
 8003538:	9b03      	ldr	r3, [sp, #12]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	9203      	str	r2, [sp, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	bfb8      	it	lt
 8003544:	f04f 33ff 	movlt.w	r3, #4294967295
 8003548:	3402      	adds	r4, #2
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003614 <_svfiprintf_r+0x1f8>
 8003550:	7821      	ldrb	r1, [r4, #0]
 8003552:	2203      	movs	r2, #3
 8003554:	4650      	mov	r0, sl
 8003556:	f7fc fe43 	bl	80001e0 <memchr>
 800355a:	b138      	cbz	r0, 800356c <_svfiprintf_r+0x150>
 800355c:	9b04      	ldr	r3, [sp, #16]
 800355e:	eba0 000a 	sub.w	r0, r0, sl
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	4082      	lsls	r2, r0
 8003566:	4313      	orrs	r3, r2
 8003568:	3401      	adds	r4, #1
 800356a:	9304      	str	r3, [sp, #16]
 800356c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003570:	4825      	ldr	r0, [pc, #148]	; (8003608 <_svfiprintf_r+0x1ec>)
 8003572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003576:	2206      	movs	r2, #6
 8003578:	f7fc fe32 	bl	80001e0 <memchr>
 800357c:	2800      	cmp	r0, #0
 800357e:	d038      	beq.n	80035f2 <_svfiprintf_r+0x1d6>
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <_svfiprintf_r+0x1f0>)
 8003582:	bb1b      	cbnz	r3, 80035cc <_svfiprintf_r+0x1b0>
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	3307      	adds	r3, #7
 8003588:	f023 0307 	bic.w	r3, r3, #7
 800358c:	3308      	adds	r3, #8
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003592:	4433      	add	r3, r6
 8003594:	9309      	str	r3, [sp, #36]	; 0x24
 8003596:	e768      	b.n	800346a <_svfiprintf_r+0x4e>
 8003598:	fb0c 3202 	mla	r2, ip, r2, r3
 800359c:	460c      	mov	r4, r1
 800359e:	2001      	movs	r0, #1
 80035a0:	e7a6      	b.n	80034f0 <_svfiprintf_r+0xd4>
 80035a2:	2300      	movs	r3, #0
 80035a4:	3401      	adds	r4, #1
 80035a6:	9305      	str	r3, [sp, #20]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f04f 0c0a 	mov.w	ip, #10
 80035ae:	4620      	mov	r0, r4
 80035b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035b4:	3a30      	subs	r2, #48	; 0x30
 80035b6:	2a09      	cmp	r2, #9
 80035b8:	d903      	bls.n	80035c2 <_svfiprintf_r+0x1a6>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0c6      	beq.n	800354c <_svfiprintf_r+0x130>
 80035be:	9105      	str	r1, [sp, #20]
 80035c0:	e7c4      	b.n	800354c <_svfiprintf_r+0x130>
 80035c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80035c6:	4604      	mov	r4, r0
 80035c8:	2301      	movs	r3, #1
 80035ca:	e7f0      	b.n	80035ae <_svfiprintf_r+0x192>
 80035cc:	ab03      	add	r3, sp, #12
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	462a      	mov	r2, r5
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <_svfiprintf_r+0x1f4>)
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	4638      	mov	r0, r7
 80035d8:	f3af 8000 	nop.w
 80035dc:	1c42      	adds	r2, r0, #1
 80035de:	4606      	mov	r6, r0
 80035e0:	d1d6      	bne.n	8003590 <_svfiprintf_r+0x174>
 80035e2:	89ab      	ldrh	r3, [r5, #12]
 80035e4:	065b      	lsls	r3, r3, #25
 80035e6:	f53f af2d 	bmi.w	8003444 <_svfiprintf_r+0x28>
 80035ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ec:	b01d      	add	sp, #116	; 0x74
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f2:	ab03      	add	r3, sp, #12
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	462a      	mov	r2, r5
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <_svfiprintf_r+0x1f4>)
 80035fa:	a904      	add	r1, sp, #16
 80035fc:	4638      	mov	r0, r7
 80035fe:	f000 f879 	bl	80036f4 <_printf_i>
 8003602:	e7eb      	b.n	80035dc <_svfiprintf_r+0x1c0>
 8003604:	08003c90 	.word	0x08003c90
 8003608:	08003c9a 	.word	0x08003c9a
 800360c:	00000000 	.word	0x00000000
 8003610:	08003369 	.word	0x08003369
 8003614:	08003c96 	.word	0x08003c96

08003618 <_printf_common>:
 8003618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800361c:	4616      	mov	r6, r2
 800361e:	4699      	mov	r9, r3
 8003620:	688a      	ldr	r2, [r1, #8]
 8003622:	690b      	ldr	r3, [r1, #16]
 8003624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003628:	4293      	cmp	r3, r2
 800362a:	bfb8      	it	lt
 800362c:	4613      	movlt	r3, r2
 800362e:	6033      	str	r3, [r6, #0]
 8003630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003634:	4607      	mov	r7, r0
 8003636:	460c      	mov	r4, r1
 8003638:	b10a      	cbz	r2, 800363e <_printf_common+0x26>
 800363a:	3301      	adds	r3, #1
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	0699      	lsls	r1, r3, #26
 8003642:	bf42      	ittt	mi
 8003644:	6833      	ldrmi	r3, [r6, #0]
 8003646:	3302      	addmi	r3, #2
 8003648:	6033      	strmi	r3, [r6, #0]
 800364a:	6825      	ldr	r5, [r4, #0]
 800364c:	f015 0506 	ands.w	r5, r5, #6
 8003650:	d106      	bne.n	8003660 <_printf_common+0x48>
 8003652:	f104 0a19 	add.w	sl, r4, #25
 8003656:	68e3      	ldr	r3, [r4, #12]
 8003658:	6832      	ldr	r2, [r6, #0]
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	42ab      	cmp	r3, r5
 800365e:	dc26      	bgt.n	80036ae <_printf_common+0x96>
 8003660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003664:	1e13      	subs	r3, r2, #0
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	bf18      	it	ne
 800366a:	2301      	movne	r3, #1
 800366c:	0692      	lsls	r2, r2, #26
 800366e:	d42b      	bmi.n	80036c8 <_printf_common+0xb0>
 8003670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003674:	4649      	mov	r1, r9
 8003676:	4638      	mov	r0, r7
 8003678:	47c0      	blx	r8
 800367a:	3001      	adds	r0, #1
 800367c:	d01e      	beq.n	80036bc <_printf_common+0xa4>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	2b04      	cmp	r3, #4
 8003688:	bf02      	ittt	eq
 800368a:	68e5      	ldreq	r5, [r4, #12]
 800368c:	6833      	ldreq	r3, [r6, #0]
 800368e:	1aed      	subeq	r5, r5, r3
 8003690:	68a3      	ldr	r3, [r4, #8]
 8003692:	bf0c      	ite	eq
 8003694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003698:	2500      	movne	r5, #0
 800369a:	4293      	cmp	r3, r2
 800369c:	bfc4      	itt	gt
 800369e:	1a9b      	subgt	r3, r3, r2
 80036a0:	18ed      	addgt	r5, r5, r3
 80036a2:	2600      	movs	r6, #0
 80036a4:	341a      	adds	r4, #26
 80036a6:	42b5      	cmp	r5, r6
 80036a8:	d11a      	bne.n	80036e0 <_printf_common+0xc8>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e008      	b.n	80036c0 <_printf_common+0xa8>
 80036ae:	2301      	movs	r3, #1
 80036b0:	4652      	mov	r2, sl
 80036b2:	4649      	mov	r1, r9
 80036b4:	4638      	mov	r0, r7
 80036b6:	47c0      	blx	r8
 80036b8:	3001      	adds	r0, #1
 80036ba:	d103      	bne.n	80036c4 <_printf_common+0xac>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	3501      	adds	r5, #1
 80036c6:	e7c6      	b.n	8003656 <_printf_common+0x3e>
 80036c8:	18e1      	adds	r1, r4, r3
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	2030      	movs	r0, #48	; 0x30
 80036ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d2:	4422      	add	r2, r4
 80036d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036dc:	3302      	adds	r3, #2
 80036de:	e7c7      	b.n	8003670 <_printf_common+0x58>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4622      	mov	r2, r4
 80036e4:	4649      	mov	r1, r9
 80036e6:	4638      	mov	r0, r7
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0e6      	beq.n	80036bc <_printf_common+0xa4>
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7d9      	b.n	80036a6 <_printf_common+0x8e>
	...

080036f4 <_printf_i>:
 80036f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	7e0f      	ldrb	r7, [r1, #24]
 80036fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036fc:	2f78      	cmp	r7, #120	; 0x78
 80036fe:	4691      	mov	r9, r2
 8003700:	4680      	mov	r8, r0
 8003702:	460c      	mov	r4, r1
 8003704:	469a      	mov	sl, r3
 8003706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800370a:	d807      	bhi.n	800371c <_printf_i+0x28>
 800370c:	2f62      	cmp	r7, #98	; 0x62
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x32>
 8003710:	2f00      	cmp	r7, #0
 8003712:	f000 80d4 	beq.w	80038be <_printf_i+0x1ca>
 8003716:	2f58      	cmp	r7, #88	; 0x58
 8003718:	f000 80c0 	beq.w	800389c <_printf_i+0x1a8>
 800371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003724:	e03a      	b.n	800379c <_printf_i+0xa8>
 8003726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800372a:	2b15      	cmp	r3, #21
 800372c:	d8f6      	bhi.n	800371c <_printf_i+0x28>
 800372e:	a101      	add	r1, pc, #4	; (adr r1, 8003734 <_printf_i+0x40>)
 8003730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003734:	0800378d 	.word	0x0800378d
 8003738:	080037a1 	.word	0x080037a1
 800373c:	0800371d 	.word	0x0800371d
 8003740:	0800371d 	.word	0x0800371d
 8003744:	0800371d 	.word	0x0800371d
 8003748:	0800371d 	.word	0x0800371d
 800374c:	080037a1 	.word	0x080037a1
 8003750:	0800371d 	.word	0x0800371d
 8003754:	0800371d 	.word	0x0800371d
 8003758:	0800371d 	.word	0x0800371d
 800375c:	0800371d 	.word	0x0800371d
 8003760:	080038a5 	.word	0x080038a5
 8003764:	080037cd 	.word	0x080037cd
 8003768:	0800385f 	.word	0x0800385f
 800376c:	0800371d 	.word	0x0800371d
 8003770:	0800371d 	.word	0x0800371d
 8003774:	080038c7 	.word	0x080038c7
 8003778:	0800371d 	.word	0x0800371d
 800377c:	080037cd 	.word	0x080037cd
 8003780:	0800371d 	.word	0x0800371d
 8003784:	0800371d 	.word	0x0800371d
 8003788:	08003867 	.word	0x08003867
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	602a      	str	r2, [r5, #0]
 8003794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379c:	2301      	movs	r3, #1
 800379e:	e09f      	b.n	80038e0 <_printf_i+0x1ec>
 80037a0:	6820      	ldr	r0, [r4, #0]
 80037a2:	682b      	ldr	r3, [r5, #0]
 80037a4:	0607      	lsls	r7, r0, #24
 80037a6:	f103 0104 	add.w	r1, r3, #4
 80037aa:	6029      	str	r1, [r5, #0]
 80037ac:	d501      	bpl.n	80037b2 <_printf_i+0xbe>
 80037ae:	681e      	ldr	r6, [r3, #0]
 80037b0:	e003      	b.n	80037ba <_printf_i+0xc6>
 80037b2:	0646      	lsls	r6, r0, #25
 80037b4:	d5fb      	bpl.n	80037ae <_printf_i+0xba>
 80037b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	da03      	bge.n	80037c6 <_printf_i+0xd2>
 80037be:	232d      	movs	r3, #45	; 0x2d
 80037c0:	4276      	negs	r6, r6
 80037c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c6:	485a      	ldr	r0, [pc, #360]	; (8003930 <_printf_i+0x23c>)
 80037c8:	230a      	movs	r3, #10
 80037ca:	e012      	b.n	80037f2 <_printf_i+0xfe>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	1d19      	adds	r1, r3, #4
 80037d2:	6029      	str	r1, [r5, #0]
 80037d4:	0605      	lsls	r5, r0, #24
 80037d6:	d501      	bpl.n	80037dc <_printf_i+0xe8>
 80037d8:	681e      	ldr	r6, [r3, #0]
 80037da:	e002      	b.n	80037e2 <_printf_i+0xee>
 80037dc:	0641      	lsls	r1, r0, #25
 80037de:	d5fb      	bpl.n	80037d8 <_printf_i+0xe4>
 80037e0:	881e      	ldrh	r6, [r3, #0]
 80037e2:	4853      	ldr	r0, [pc, #332]	; (8003930 <_printf_i+0x23c>)
 80037e4:	2f6f      	cmp	r7, #111	; 0x6f
 80037e6:	bf0c      	ite	eq
 80037e8:	2308      	moveq	r3, #8
 80037ea:	230a      	movne	r3, #10
 80037ec:	2100      	movs	r1, #0
 80037ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f2:	6865      	ldr	r5, [r4, #4]
 80037f4:	60a5      	str	r5, [r4, #8]
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	bfa2      	ittt	ge
 80037fa:	6821      	ldrge	r1, [r4, #0]
 80037fc:	f021 0104 	bicge.w	r1, r1, #4
 8003800:	6021      	strge	r1, [r4, #0]
 8003802:	b90e      	cbnz	r6, 8003808 <_printf_i+0x114>
 8003804:	2d00      	cmp	r5, #0
 8003806:	d04b      	beq.n	80038a0 <_printf_i+0x1ac>
 8003808:	4615      	mov	r5, r2
 800380a:	fbb6 f1f3 	udiv	r1, r6, r3
 800380e:	fb03 6711 	mls	r7, r3, r1, r6
 8003812:	5dc7      	ldrb	r7, [r0, r7]
 8003814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003818:	4637      	mov	r7, r6
 800381a:	42bb      	cmp	r3, r7
 800381c:	460e      	mov	r6, r1
 800381e:	d9f4      	bls.n	800380a <_printf_i+0x116>
 8003820:	2b08      	cmp	r3, #8
 8003822:	d10b      	bne.n	800383c <_printf_i+0x148>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	07de      	lsls	r6, r3, #31
 8003828:	d508      	bpl.n	800383c <_printf_i+0x148>
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	6861      	ldr	r1, [r4, #4]
 800382e:	4299      	cmp	r1, r3
 8003830:	bfde      	ittt	le
 8003832:	2330      	movle	r3, #48	; 0x30
 8003834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800383c:	1b52      	subs	r2, r2, r5
 800383e:	6122      	str	r2, [r4, #16]
 8003840:	f8cd a000 	str.w	sl, [sp]
 8003844:	464b      	mov	r3, r9
 8003846:	aa03      	add	r2, sp, #12
 8003848:	4621      	mov	r1, r4
 800384a:	4640      	mov	r0, r8
 800384c:	f7ff fee4 	bl	8003618 <_printf_common>
 8003850:	3001      	adds	r0, #1
 8003852:	d14a      	bne.n	80038ea <_printf_i+0x1f6>
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	b004      	add	sp, #16
 800385a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	4833      	ldr	r0, [pc, #204]	; (8003934 <_printf_i+0x240>)
 8003868:	2778      	movs	r7, #120	; 0x78
 800386a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	6829      	ldr	r1, [r5, #0]
 8003872:	061f      	lsls	r7, r3, #24
 8003874:	f851 6b04 	ldr.w	r6, [r1], #4
 8003878:	d402      	bmi.n	8003880 <_printf_i+0x18c>
 800387a:	065f      	lsls	r7, r3, #25
 800387c:	bf48      	it	mi
 800387e:	b2b6      	uxthmi	r6, r6
 8003880:	07df      	lsls	r7, r3, #31
 8003882:	bf48      	it	mi
 8003884:	f043 0320 	orrmi.w	r3, r3, #32
 8003888:	6029      	str	r1, [r5, #0]
 800388a:	bf48      	it	mi
 800388c:	6023      	strmi	r3, [r4, #0]
 800388e:	b91e      	cbnz	r6, 8003898 <_printf_i+0x1a4>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	f023 0320 	bic.w	r3, r3, #32
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	2310      	movs	r3, #16
 800389a:	e7a7      	b.n	80037ec <_printf_i+0xf8>
 800389c:	4824      	ldr	r0, [pc, #144]	; (8003930 <_printf_i+0x23c>)
 800389e:	e7e4      	b.n	800386a <_printf_i+0x176>
 80038a0:	4615      	mov	r5, r2
 80038a2:	e7bd      	b.n	8003820 <_printf_i+0x12c>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	6826      	ldr	r6, [r4, #0]
 80038a8:	6961      	ldr	r1, [r4, #20]
 80038aa:	1d18      	adds	r0, r3, #4
 80038ac:	6028      	str	r0, [r5, #0]
 80038ae:	0635      	lsls	r5, r6, #24
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	d501      	bpl.n	80038b8 <_printf_i+0x1c4>
 80038b4:	6019      	str	r1, [r3, #0]
 80038b6:	e002      	b.n	80038be <_printf_i+0x1ca>
 80038b8:	0670      	lsls	r0, r6, #25
 80038ba:	d5fb      	bpl.n	80038b4 <_printf_i+0x1c0>
 80038bc:	8019      	strh	r1, [r3, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	4615      	mov	r5, r2
 80038c4:	e7bc      	b.n	8003840 <_printf_i+0x14c>
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	1d1a      	adds	r2, r3, #4
 80038ca:	602a      	str	r2, [r5, #0]
 80038cc:	681d      	ldr	r5, [r3, #0]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	2100      	movs	r1, #0
 80038d2:	4628      	mov	r0, r5
 80038d4:	f7fc fc84 	bl	80001e0 <memchr>
 80038d8:	b108      	cbz	r0, 80038de <_printf_i+0x1ea>
 80038da:	1b40      	subs	r0, r0, r5
 80038dc:	6060      	str	r0, [r4, #4]
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e8:	e7aa      	b.n	8003840 <_printf_i+0x14c>
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4649      	mov	r1, r9
 80038f0:	4640      	mov	r0, r8
 80038f2:	47d0      	blx	sl
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0ad      	beq.n	8003854 <_printf_i+0x160>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	079b      	lsls	r3, r3, #30
 80038fc:	d413      	bmi.n	8003926 <_printf_i+0x232>
 80038fe:	68e0      	ldr	r0, [r4, #12]
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	4298      	cmp	r0, r3
 8003904:	bfb8      	it	lt
 8003906:	4618      	movlt	r0, r3
 8003908:	e7a6      	b.n	8003858 <_printf_i+0x164>
 800390a:	2301      	movs	r3, #1
 800390c:	4632      	mov	r2, r6
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	47d0      	blx	sl
 8003914:	3001      	adds	r0, #1
 8003916:	d09d      	beq.n	8003854 <_printf_i+0x160>
 8003918:	3501      	adds	r5, #1
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	9903      	ldr	r1, [sp, #12]
 800391e:	1a5b      	subs	r3, r3, r1
 8003920:	42ab      	cmp	r3, r5
 8003922:	dcf2      	bgt.n	800390a <_printf_i+0x216>
 8003924:	e7eb      	b.n	80038fe <_printf_i+0x20a>
 8003926:	2500      	movs	r5, #0
 8003928:	f104 0619 	add.w	r6, r4, #25
 800392c:	e7f5      	b.n	800391a <_printf_i+0x226>
 800392e:	bf00      	nop
 8003930:	08003ca1 	.word	0x08003ca1
 8003934:	08003cb2 	.word	0x08003cb2

08003938 <memmove>:
 8003938:	4288      	cmp	r0, r1
 800393a:	b510      	push	{r4, lr}
 800393c:	eb01 0402 	add.w	r4, r1, r2
 8003940:	d902      	bls.n	8003948 <memmove+0x10>
 8003942:	4284      	cmp	r4, r0
 8003944:	4623      	mov	r3, r4
 8003946:	d807      	bhi.n	8003958 <memmove+0x20>
 8003948:	1e43      	subs	r3, r0, #1
 800394a:	42a1      	cmp	r1, r4
 800394c:	d008      	beq.n	8003960 <memmove+0x28>
 800394e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003956:	e7f8      	b.n	800394a <memmove+0x12>
 8003958:	4402      	add	r2, r0
 800395a:	4601      	mov	r1, r0
 800395c:	428a      	cmp	r2, r1
 800395e:	d100      	bne.n	8003962 <memmove+0x2a>
 8003960:	bd10      	pop	{r4, pc}
 8003962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800396a:	e7f7      	b.n	800395c <memmove+0x24>

0800396c <_sbrk_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4d06      	ldr	r5, [pc, #24]	; (8003988 <_sbrk_r+0x1c>)
 8003970:	2300      	movs	r3, #0
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fd fb3e 	bl	8000ff8 <_sbrk>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_sbrk_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_sbrk_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	2000046c 	.word	0x2000046c

0800398c <memcpy>:
 800398c:	440a      	add	r2, r1
 800398e:	4291      	cmp	r1, r2
 8003990:	f100 33ff 	add.w	r3, r0, #4294967295
 8003994:	d100      	bne.n	8003998 <memcpy+0xc>
 8003996:	4770      	bx	lr
 8003998:	b510      	push	{r4, lr}
 800399a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800399e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039a2:	4291      	cmp	r1, r2
 80039a4:	d1f9      	bne.n	800399a <memcpy+0xe>
 80039a6:	bd10      	pop	{r4, pc}

080039a8 <_realloc_r>:
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	4680      	mov	r8, r0
 80039ae:	4614      	mov	r4, r2
 80039b0:	460e      	mov	r6, r1
 80039b2:	b921      	cbnz	r1, 80039be <_realloc_r+0x16>
 80039b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	4611      	mov	r1, r2
 80039ba:	f7ff bc49 	b.w	8003250 <_malloc_r>
 80039be:	b92a      	cbnz	r2, 80039cc <_realloc_r+0x24>
 80039c0:	f7ff fbda 	bl	8003178 <_free_r>
 80039c4:	4625      	mov	r5, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	f000 f81b 	bl	8003a06 <_malloc_usable_size_r>
 80039d0:	4284      	cmp	r4, r0
 80039d2:	4607      	mov	r7, r0
 80039d4:	d802      	bhi.n	80039dc <_realloc_r+0x34>
 80039d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039da:	d812      	bhi.n	8003a02 <_realloc_r+0x5a>
 80039dc:	4621      	mov	r1, r4
 80039de:	4640      	mov	r0, r8
 80039e0:	f7ff fc36 	bl	8003250 <_malloc_r>
 80039e4:	4605      	mov	r5, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d0ed      	beq.n	80039c6 <_realloc_r+0x1e>
 80039ea:	42bc      	cmp	r4, r7
 80039ec:	4622      	mov	r2, r4
 80039ee:	4631      	mov	r1, r6
 80039f0:	bf28      	it	cs
 80039f2:	463a      	movcs	r2, r7
 80039f4:	f7ff ffca 	bl	800398c <memcpy>
 80039f8:	4631      	mov	r1, r6
 80039fa:	4640      	mov	r0, r8
 80039fc:	f7ff fbbc 	bl	8003178 <_free_r>
 8003a00:	e7e1      	b.n	80039c6 <_realloc_r+0x1e>
 8003a02:	4635      	mov	r5, r6
 8003a04:	e7df      	b.n	80039c6 <_realloc_r+0x1e>

08003a06 <_malloc_usable_size_r>:
 8003a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a0a:	1f18      	subs	r0, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfbc      	itt	lt
 8003a10:	580b      	ldrlt	r3, [r1, r0]
 8003a12:	18c0      	addlt	r0, r0, r3
 8003a14:	4770      	bx	lr
	...

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
=======
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <siprintf>:
 80033bc:	b40e      	push	{r1, r2, r3}
 80033be:	b500      	push	{lr}
 80033c0:	b09c      	sub	sp, #112	; 0x70
 80033c2:	ab1d      	add	r3, sp, #116	; 0x74
 80033c4:	9002      	str	r0, [sp, #8]
 80033c6:	9006      	str	r0, [sp, #24]
 80033c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033cc:	4809      	ldr	r0, [pc, #36]	; (80033f4 <siprintf+0x38>)
 80033ce:	9107      	str	r1, [sp, #28]
 80033d0:	9104      	str	r1, [sp, #16]
 80033d2:	4909      	ldr	r1, [pc, #36]	; (80033f8 <siprintf+0x3c>)
 80033d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033d8:	9105      	str	r1, [sp, #20]
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	a902      	add	r1, sp, #8
 80033e0:	f000 f992 	bl	8003708 <_svfiprintf_r>
 80033e4:	9b02      	ldr	r3, [sp, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	b01c      	add	sp, #112	; 0x70
 80033ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f0:	b003      	add	sp, #12
 80033f2:	4770      	bx	lr
 80033f4:	20000058 	.word	0x20000058
 80033f8:	ffff0208 	.word	0xffff0208

080033fc <memset>:
 80033fc:	4402      	add	r2, r0
 80033fe:	4603      	mov	r3, r0
 8003400:	4293      	cmp	r3, r2
 8003402:	d100      	bne.n	8003406 <memset+0xa>
 8003404:	4770      	bx	lr
 8003406:	f803 1b01 	strb.w	r1, [r3], #1
 800340a:	e7f9      	b.n	8003400 <memset+0x4>

0800340c <__errno>:
 800340c:	4b01      	ldr	r3, [pc, #4]	; (8003414 <__errno+0x8>)
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000058 	.word	0x20000058

08003418 <__libc_init_array>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	4d0d      	ldr	r5, [pc, #52]	; (8003450 <__libc_init_array+0x38>)
 800341c:	4c0d      	ldr	r4, [pc, #52]	; (8003454 <__libc_init_array+0x3c>)
 800341e:	1b64      	subs	r4, r4, r5
 8003420:	10a4      	asrs	r4, r4, #2
 8003422:	2600      	movs	r6, #0
 8003424:	42a6      	cmp	r6, r4
 8003426:	d109      	bne.n	800343c <__libc_init_array+0x24>
 8003428:	4d0b      	ldr	r5, [pc, #44]	; (8003458 <__libc_init_array+0x40>)
 800342a:	4c0c      	ldr	r4, [pc, #48]	; (800345c <__libc_init_array+0x44>)
 800342c:	f000 fc6a 	bl	8003d04 <_init>
 8003430:	1b64      	subs	r4, r4, r5
 8003432:	10a4      	asrs	r4, r4, #2
 8003434:	2600      	movs	r6, #0
 8003436:	42a6      	cmp	r6, r4
 8003438:	d105      	bne.n	8003446 <__libc_init_array+0x2e>
 800343a:	bd70      	pop	{r4, r5, r6, pc}
 800343c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003440:	4798      	blx	r3
 8003442:	3601      	adds	r6, #1
 8003444:	e7ee      	b.n	8003424 <__libc_init_array+0xc>
 8003446:	f855 3b04 	ldr.w	r3, [r5], #4
 800344a:	4798      	blx	r3
 800344c:	3601      	adds	r6, #1
 800344e:	e7f2      	b.n	8003436 <__libc_init_array+0x1e>
 8003450:	08003fb8 	.word	0x08003fb8
 8003454:	08003fb8 	.word	0x08003fb8
 8003458:	08003fb8 	.word	0x08003fb8
 800345c:	08003fbc 	.word	0x08003fbc

08003460 <__retarget_lock_acquire_recursive>:
 8003460:	4770      	bx	lr

08003462 <__retarget_lock_release_recursive>:
 8003462:	4770      	bx	lr

08003464 <_free_r>:
 8003464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003466:	2900      	cmp	r1, #0
 8003468:	d044      	beq.n	80034f4 <_free_r+0x90>
 800346a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800346e:	9001      	str	r0, [sp, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f1a1 0404 	sub.w	r4, r1, #4
 8003476:	bfb8      	it	lt
 8003478:	18e4      	addlt	r4, r4, r3
 800347a:	f000 f8df 	bl	800363c <__malloc_lock>
 800347e:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <_free_r+0x94>)
 8003480:	9801      	ldr	r0, [sp, #4]
 8003482:	6813      	ldr	r3, [r2, #0]
 8003484:	b933      	cbnz	r3, 8003494 <_free_r+0x30>
 8003486:	6063      	str	r3, [r4, #4]
 8003488:	6014      	str	r4, [r2, #0]
 800348a:	b003      	add	sp, #12
 800348c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003490:	f000 b8da 	b.w	8003648 <__malloc_unlock>
 8003494:	42a3      	cmp	r3, r4
 8003496:	d908      	bls.n	80034aa <_free_r+0x46>
 8003498:	6825      	ldr	r5, [r4, #0]
 800349a:	1961      	adds	r1, r4, r5
 800349c:	428b      	cmp	r3, r1
 800349e:	bf01      	itttt	eq
 80034a0:	6819      	ldreq	r1, [r3, #0]
 80034a2:	685b      	ldreq	r3, [r3, #4]
 80034a4:	1949      	addeq	r1, r1, r5
 80034a6:	6021      	streq	r1, [r4, #0]
 80034a8:	e7ed      	b.n	8003486 <_free_r+0x22>
 80034aa:	461a      	mov	r2, r3
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b10b      	cbz	r3, 80034b4 <_free_r+0x50>
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	d9fa      	bls.n	80034aa <_free_r+0x46>
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	1855      	adds	r5, r2, r1
 80034b8:	42a5      	cmp	r5, r4
 80034ba:	d10b      	bne.n	80034d4 <_free_r+0x70>
 80034bc:	6824      	ldr	r4, [r4, #0]
 80034be:	4421      	add	r1, r4
 80034c0:	1854      	adds	r4, r2, r1
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	d1e0      	bne.n	800348a <_free_r+0x26>
 80034c8:	681c      	ldr	r4, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	6053      	str	r3, [r2, #4]
 80034ce:	440c      	add	r4, r1
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	e7da      	b.n	800348a <_free_r+0x26>
 80034d4:	d902      	bls.n	80034dc <_free_r+0x78>
 80034d6:	230c      	movs	r3, #12
 80034d8:	6003      	str	r3, [r0, #0]
 80034da:	e7d6      	b.n	800348a <_free_r+0x26>
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	1961      	adds	r1, r4, r5
 80034e0:	428b      	cmp	r3, r1
 80034e2:	bf04      	itt	eq
 80034e4:	6819      	ldreq	r1, [r3, #0]
 80034e6:	685b      	ldreq	r3, [r3, #4]
 80034e8:	6063      	str	r3, [r4, #4]
 80034ea:	bf04      	itt	eq
 80034ec:	1949      	addeq	r1, r1, r5
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	6054      	str	r4, [r2, #4]
 80034f2:	e7ca      	b.n	800348a <_free_r+0x26>
 80034f4:	b003      	add	sp, #12
 80034f6:	bd30      	pop	{r4, r5, pc}
 80034f8:	20000474 	.word	0x20000474

080034fc <sbrk_aligned>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0e      	ldr	r6, [pc, #56]	; (8003538 <sbrk_aligned+0x3c>)
 8003500:	460c      	mov	r4, r1
 8003502:	6831      	ldr	r1, [r6, #0]
 8003504:	4605      	mov	r5, r0
 8003506:	b911      	cbnz	r1, 800350e <sbrk_aligned+0x12>
 8003508:	f000 fba6 	bl	8003c58 <_sbrk_r>
 800350c:	6030      	str	r0, [r6, #0]
 800350e:	4621      	mov	r1, r4
 8003510:	4628      	mov	r0, r5
 8003512:	f000 fba1 	bl	8003c58 <_sbrk_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	d00a      	beq.n	8003530 <sbrk_aligned+0x34>
 800351a:	1cc4      	adds	r4, r0, #3
 800351c:	f024 0403 	bic.w	r4, r4, #3
 8003520:	42a0      	cmp	r0, r4
 8003522:	d007      	beq.n	8003534 <sbrk_aligned+0x38>
 8003524:	1a21      	subs	r1, r4, r0
 8003526:	4628      	mov	r0, r5
 8003528:	f000 fb96 	bl	8003c58 <_sbrk_r>
 800352c:	3001      	adds	r0, #1
 800352e:	d101      	bne.n	8003534 <sbrk_aligned+0x38>
 8003530:	f04f 34ff 	mov.w	r4, #4294967295
 8003534:	4620      	mov	r0, r4
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	20000478 	.word	0x20000478

0800353c <_malloc_r>:
 800353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003540:	1ccd      	adds	r5, r1, #3
 8003542:	f025 0503 	bic.w	r5, r5, #3
 8003546:	3508      	adds	r5, #8
 8003548:	2d0c      	cmp	r5, #12
 800354a:	bf38      	it	cc
 800354c:	250c      	movcc	r5, #12
 800354e:	2d00      	cmp	r5, #0
 8003550:	4607      	mov	r7, r0
 8003552:	db01      	blt.n	8003558 <_malloc_r+0x1c>
 8003554:	42a9      	cmp	r1, r5
 8003556:	d905      	bls.n	8003564 <_malloc_r+0x28>
 8003558:	230c      	movs	r3, #12
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	2600      	movs	r6, #0
 800355e:	4630      	mov	r0, r6
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003638 <_malloc_r+0xfc>
 8003568:	f000 f868 	bl	800363c <__malloc_lock>
 800356c:	f8d8 3000 	ldr.w	r3, [r8]
 8003570:	461c      	mov	r4, r3
 8003572:	bb5c      	cbnz	r4, 80035cc <_malloc_r+0x90>
 8003574:	4629      	mov	r1, r5
 8003576:	4638      	mov	r0, r7
 8003578:	f7ff ffc0 	bl	80034fc <sbrk_aligned>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	4604      	mov	r4, r0
 8003580:	d155      	bne.n	800362e <_malloc_r+0xf2>
 8003582:	f8d8 4000 	ldr.w	r4, [r8]
 8003586:	4626      	mov	r6, r4
 8003588:	2e00      	cmp	r6, #0
 800358a:	d145      	bne.n	8003618 <_malloc_r+0xdc>
 800358c:	2c00      	cmp	r4, #0
 800358e:	d048      	beq.n	8003622 <_malloc_r+0xe6>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	4631      	mov	r1, r6
 8003594:	4638      	mov	r0, r7
 8003596:	eb04 0903 	add.w	r9, r4, r3
 800359a:	f000 fb5d 	bl	8003c58 <_sbrk_r>
 800359e:	4581      	cmp	r9, r0
 80035a0:	d13f      	bne.n	8003622 <_malloc_r+0xe6>
 80035a2:	6821      	ldr	r1, [r4, #0]
 80035a4:	1a6d      	subs	r5, r5, r1
 80035a6:	4629      	mov	r1, r5
 80035a8:	4638      	mov	r0, r7
 80035aa:	f7ff ffa7 	bl	80034fc <sbrk_aligned>
 80035ae:	3001      	adds	r0, #1
 80035b0:	d037      	beq.n	8003622 <_malloc_r+0xe6>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	442b      	add	r3, r5
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	f8d8 3000 	ldr.w	r3, [r8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d038      	beq.n	8003632 <_malloc_r+0xf6>
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	42a2      	cmp	r2, r4
 80035c4:	d12b      	bne.n	800361e <_malloc_r+0xe2>
 80035c6:	2200      	movs	r2, #0
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e00f      	b.n	80035ec <_malloc_r+0xb0>
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	1b52      	subs	r2, r2, r5
 80035d0:	d41f      	bmi.n	8003612 <_malloc_r+0xd6>
 80035d2:	2a0b      	cmp	r2, #11
 80035d4:	d917      	bls.n	8003606 <_malloc_r+0xca>
 80035d6:	1961      	adds	r1, r4, r5
 80035d8:	42a3      	cmp	r3, r4
 80035da:	6025      	str	r5, [r4, #0]
 80035dc:	bf18      	it	ne
 80035de:	6059      	strne	r1, [r3, #4]
 80035e0:	6863      	ldr	r3, [r4, #4]
 80035e2:	bf08      	it	eq
 80035e4:	f8c8 1000 	streq.w	r1, [r8]
 80035e8:	5162      	str	r2, [r4, r5]
 80035ea:	604b      	str	r3, [r1, #4]
 80035ec:	4638      	mov	r0, r7
 80035ee:	f104 060b 	add.w	r6, r4, #11
 80035f2:	f000 f829 	bl	8003648 <__malloc_unlock>
 80035f6:	f026 0607 	bic.w	r6, r6, #7
 80035fa:	1d23      	adds	r3, r4, #4
 80035fc:	1af2      	subs	r2, r6, r3
 80035fe:	d0ae      	beq.n	800355e <_malloc_r+0x22>
 8003600:	1b9b      	subs	r3, r3, r6
 8003602:	50a3      	str	r3, [r4, r2]
 8003604:	e7ab      	b.n	800355e <_malloc_r+0x22>
 8003606:	42a3      	cmp	r3, r4
 8003608:	6862      	ldr	r2, [r4, #4]
 800360a:	d1dd      	bne.n	80035c8 <_malloc_r+0x8c>
 800360c:	f8c8 2000 	str.w	r2, [r8]
 8003610:	e7ec      	b.n	80035ec <_malloc_r+0xb0>
 8003612:	4623      	mov	r3, r4
 8003614:	6864      	ldr	r4, [r4, #4]
 8003616:	e7ac      	b.n	8003572 <_malloc_r+0x36>
 8003618:	4634      	mov	r4, r6
 800361a:	6876      	ldr	r6, [r6, #4]
 800361c:	e7b4      	b.n	8003588 <_malloc_r+0x4c>
 800361e:	4613      	mov	r3, r2
 8003620:	e7cc      	b.n	80035bc <_malloc_r+0x80>
 8003622:	230c      	movs	r3, #12
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4638      	mov	r0, r7
 8003628:	f000 f80e 	bl	8003648 <__malloc_unlock>
 800362c:	e797      	b.n	800355e <_malloc_r+0x22>
 800362e:	6025      	str	r5, [r4, #0]
 8003630:	e7dc      	b.n	80035ec <_malloc_r+0xb0>
 8003632:	605b      	str	r3, [r3, #4]
 8003634:	deff      	udf	#255	; 0xff
 8003636:	bf00      	nop
 8003638:	20000474 	.word	0x20000474

0800363c <__malloc_lock>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__malloc_lock+0x8>)
 800363e:	f7ff bf0f 	b.w	8003460 <__retarget_lock_acquire_recursive>
 8003642:	bf00      	nop
 8003644:	20000470 	.word	0x20000470

08003648 <__malloc_unlock>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__malloc_unlock+0x8>)
 800364a:	f7ff bf0a 	b.w	8003462 <__retarget_lock_release_recursive>
 800364e:	bf00      	nop
 8003650:	20000470 	.word	0x20000470

08003654 <__ssputs_r>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	688e      	ldr	r6, [r1, #8]
 800365a:	461f      	mov	r7, r3
 800365c:	42be      	cmp	r6, r7
 800365e:	680b      	ldr	r3, [r1, #0]
 8003660:	4682      	mov	sl, r0
 8003662:	460c      	mov	r4, r1
 8003664:	4690      	mov	r8, r2
 8003666:	d82c      	bhi.n	80036c2 <__ssputs_r+0x6e>
 8003668:	898a      	ldrh	r2, [r1, #12]
 800366a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800366e:	d026      	beq.n	80036be <__ssputs_r+0x6a>
 8003670:	6965      	ldr	r5, [r4, #20]
 8003672:	6909      	ldr	r1, [r1, #16]
 8003674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003678:	eba3 0901 	sub.w	r9, r3, r1
 800367c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003680:	1c7b      	adds	r3, r7, #1
 8003682:	444b      	add	r3, r9
 8003684:	106d      	asrs	r5, r5, #1
 8003686:	429d      	cmp	r5, r3
 8003688:	bf38      	it	cc
 800368a:	461d      	movcc	r5, r3
 800368c:	0553      	lsls	r3, r2, #21
 800368e:	d527      	bpl.n	80036e0 <__ssputs_r+0x8c>
 8003690:	4629      	mov	r1, r5
 8003692:	f7ff ff53 	bl	800353c <_malloc_r>
 8003696:	4606      	mov	r6, r0
 8003698:	b360      	cbz	r0, 80036f4 <__ssputs_r+0xa0>
 800369a:	6921      	ldr	r1, [r4, #16]
 800369c:	464a      	mov	r2, r9
 800369e:	f000 faeb 	bl	8003c78 <memcpy>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	6126      	str	r6, [r4, #16]
 80036b0:	6165      	str	r5, [r4, #20]
 80036b2:	444e      	add	r6, r9
 80036b4:	eba5 0509 	sub.w	r5, r5, r9
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	60a5      	str	r5, [r4, #8]
 80036bc:	463e      	mov	r6, r7
 80036be:	42be      	cmp	r6, r7
 80036c0:	d900      	bls.n	80036c4 <__ssputs_r+0x70>
 80036c2:	463e      	mov	r6, r7
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	4632      	mov	r2, r6
 80036c8:	4641      	mov	r1, r8
 80036ca:	f000 faab 	bl	8003c24 <memmove>
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	1b9b      	subs	r3, r3, r6
 80036d2:	60a3      	str	r3, [r4, #8]
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	4433      	add	r3, r6
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	2000      	movs	r0, #0
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	462a      	mov	r2, r5
 80036e2:	f000 fad7 	bl	8003c94 <_realloc_r>
 80036e6:	4606      	mov	r6, r0
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d1e0      	bne.n	80036ae <__ssputs_r+0x5a>
 80036ec:	6921      	ldr	r1, [r4, #16]
 80036ee:	4650      	mov	r0, sl
 80036f0:	f7ff feb8 	bl	8003464 <_free_r>
 80036f4:	230c      	movs	r3, #12
 80036f6:	f8ca 3000 	str.w	r3, [sl]
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003700:	81a3      	strh	r3, [r4, #12]
 8003702:	f04f 30ff 	mov.w	r0, #4294967295
 8003706:	e7e9      	b.n	80036dc <__ssputs_r+0x88>

08003708 <_svfiprintf_r>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	4698      	mov	r8, r3
 800370e:	898b      	ldrh	r3, [r1, #12]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	b09d      	sub	sp, #116	; 0x74
 8003714:	4607      	mov	r7, r0
 8003716:	460d      	mov	r5, r1
 8003718:	4614      	mov	r4, r2
 800371a:	d50e      	bpl.n	800373a <_svfiprintf_r+0x32>
 800371c:	690b      	ldr	r3, [r1, #16]
 800371e:	b963      	cbnz	r3, 800373a <_svfiprintf_r+0x32>
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	f7ff ff0b 	bl	800353c <_malloc_r>
 8003726:	6028      	str	r0, [r5, #0]
 8003728:	6128      	str	r0, [r5, #16]
 800372a:	b920      	cbnz	r0, 8003736 <_svfiprintf_r+0x2e>
 800372c:	230c      	movs	r3, #12
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e0d0      	b.n	80038d8 <_svfiprintf_r+0x1d0>
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	616b      	str	r3, [r5, #20]
 800373a:	2300      	movs	r3, #0
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	2320      	movs	r3, #32
 8003740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003744:	f8cd 800c 	str.w	r8, [sp, #12]
 8003748:	2330      	movs	r3, #48	; 0x30
 800374a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038f0 <_svfiprintf_r+0x1e8>
 800374e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003752:	f04f 0901 	mov.w	r9, #1
 8003756:	4623      	mov	r3, r4
 8003758:	469a      	mov	sl, r3
 800375a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375e:	b10a      	cbz	r2, 8003764 <_svfiprintf_r+0x5c>
 8003760:	2a25      	cmp	r2, #37	; 0x25
 8003762:	d1f9      	bne.n	8003758 <_svfiprintf_r+0x50>
 8003764:	ebba 0b04 	subs.w	fp, sl, r4
 8003768:	d00b      	beq.n	8003782 <_svfiprintf_r+0x7a>
 800376a:	465b      	mov	r3, fp
 800376c:	4622      	mov	r2, r4
 800376e:	4629      	mov	r1, r5
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ff6f 	bl	8003654 <__ssputs_r>
 8003776:	3001      	adds	r0, #1
 8003778:	f000 80a9 	beq.w	80038ce <_svfiprintf_r+0x1c6>
 800377c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800377e:	445a      	add	r2, fp
 8003780:	9209      	str	r2, [sp, #36]	; 0x24
 8003782:	f89a 3000 	ldrb.w	r3, [sl]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a1 	beq.w	80038ce <_svfiprintf_r+0x1c6>
 800378c:	2300      	movs	r3, #0
 800378e:	f04f 32ff 	mov.w	r2, #4294967295
 8003792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003796:	f10a 0a01 	add.w	sl, sl, #1
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	9307      	str	r3, [sp, #28]
 800379e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a2:	931a      	str	r3, [sp, #104]	; 0x68
 80037a4:	4654      	mov	r4, sl
 80037a6:	2205      	movs	r2, #5
 80037a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ac:	4850      	ldr	r0, [pc, #320]	; (80038f0 <_svfiprintf_r+0x1e8>)
 80037ae:	f7fc fd17 	bl	80001e0 <memchr>
 80037b2:	9a04      	ldr	r2, [sp, #16]
 80037b4:	b9d8      	cbnz	r0, 80037ee <_svfiprintf_r+0xe6>
 80037b6:	06d0      	lsls	r0, r2, #27
 80037b8:	bf44      	itt	mi
 80037ba:	2320      	movmi	r3, #32
 80037bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c0:	0711      	lsls	r1, r2, #28
 80037c2:	bf44      	itt	mi
 80037c4:	232b      	movmi	r3, #43	; 0x2b
 80037c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b2a      	cmp	r3, #42	; 0x2a
 80037d0:	d015      	beq.n	80037fe <_svfiprintf_r+0xf6>
 80037d2:	9a07      	ldr	r2, [sp, #28]
 80037d4:	4654      	mov	r4, sl
 80037d6:	2000      	movs	r0, #0
 80037d8:	f04f 0c0a 	mov.w	ip, #10
 80037dc:	4621      	mov	r1, r4
 80037de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037e2:	3b30      	subs	r3, #48	; 0x30
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	d94d      	bls.n	8003884 <_svfiprintf_r+0x17c>
 80037e8:	b1b0      	cbz	r0, 8003818 <_svfiprintf_r+0x110>
 80037ea:	9207      	str	r2, [sp, #28]
 80037ec:	e014      	b.n	8003818 <_svfiprintf_r+0x110>
 80037ee:	eba0 0308 	sub.w	r3, r0, r8
 80037f2:	fa09 f303 	lsl.w	r3, r9, r3
 80037f6:	4313      	orrs	r3, r2
 80037f8:	9304      	str	r3, [sp, #16]
 80037fa:	46a2      	mov	sl, r4
 80037fc:	e7d2      	b.n	80037a4 <_svfiprintf_r+0x9c>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	1d19      	adds	r1, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9103      	str	r1, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfbb      	ittet	lt
 800380a:	425b      	neglt	r3, r3
 800380c:	f042 0202 	orrlt.w	r2, r2, #2
 8003810:	9307      	strge	r3, [sp, #28]
 8003812:	9307      	strlt	r3, [sp, #28]
 8003814:	bfb8      	it	lt
 8003816:	9204      	strlt	r2, [sp, #16]
 8003818:	7823      	ldrb	r3, [r4, #0]
 800381a:	2b2e      	cmp	r3, #46	; 0x2e
 800381c:	d10c      	bne.n	8003838 <_svfiprintf_r+0x130>
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	2b2a      	cmp	r3, #42	; 0x2a
 8003822:	d134      	bne.n	800388e <_svfiprintf_r+0x186>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	9203      	str	r2, [sp, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfb8      	it	lt
 8003830:	f04f 33ff 	movlt.w	r3, #4294967295
 8003834:	3402      	adds	r4, #2
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003900 <_svfiprintf_r+0x1f8>
 800383c:	7821      	ldrb	r1, [r4, #0]
 800383e:	2203      	movs	r2, #3
 8003840:	4650      	mov	r0, sl
 8003842:	f7fc fccd 	bl	80001e0 <memchr>
 8003846:	b138      	cbz	r0, 8003858 <_svfiprintf_r+0x150>
 8003848:	9b04      	ldr	r3, [sp, #16]
 800384a:	eba0 000a 	sub.w	r0, r0, sl
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	4082      	lsls	r2, r0
 8003852:	4313      	orrs	r3, r2
 8003854:	3401      	adds	r4, #1
 8003856:	9304      	str	r3, [sp, #16]
 8003858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385c:	4825      	ldr	r0, [pc, #148]	; (80038f4 <_svfiprintf_r+0x1ec>)
 800385e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003862:	2206      	movs	r2, #6
 8003864:	f7fc fcbc 	bl	80001e0 <memchr>
 8003868:	2800      	cmp	r0, #0
 800386a:	d038      	beq.n	80038de <_svfiprintf_r+0x1d6>
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <_svfiprintf_r+0x1f0>)
 800386e:	bb1b      	cbnz	r3, 80038b8 <_svfiprintf_r+0x1b0>
 8003870:	9b03      	ldr	r3, [sp, #12]
 8003872:	3307      	adds	r3, #7
 8003874:	f023 0307 	bic.w	r3, r3, #7
 8003878:	3308      	adds	r3, #8
 800387a:	9303      	str	r3, [sp, #12]
 800387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387e:	4433      	add	r3, r6
 8003880:	9309      	str	r3, [sp, #36]	; 0x24
 8003882:	e768      	b.n	8003756 <_svfiprintf_r+0x4e>
 8003884:	fb0c 3202 	mla	r2, ip, r2, r3
 8003888:	460c      	mov	r4, r1
 800388a:	2001      	movs	r0, #1
 800388c:	e7a6      	b.n	80037dc <_svfiprintf_r+0xd4>
 800388e:	2300      	movs	r3, #0
 8003890:	3401      	adds	r4, #1
 8003892:	9305      	str	r3, [sp, #20]
 8003894:	4619      	mov	r1, r3
 8003896:	f04f 0c0a 	mov.w	ip, #10
 800389a:	4620      	mov	r0, r4
 800389c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038a0:	3a30      	subs	r2, #48	; 0x30
 80038a2:	2a09      	cmp	r2, #9
 80038a4:	d903      	bls.n	80038ae <_svfiprintf_r+0x1a6>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0c6      	beq.n	8003838 <_svfiprintf_r+0x130>
 80038aa:	9105      	str	r1, [sp, #20]
 80038ac:	e7c4      	b.n	8003838 <_svfiprintf_r+0x130>
 80038ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80038b2:	4604      	mov	r4, r0
 80038b4:	2301      	movs	r3, #1
 80038b6:	e7f0      	b.n	800389a <_svfiprintf_r+0x192>
 80038b8:	ab03      	add	r3, sp, #12
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	462a      	mov	r2, r5
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <_svfiprintf_r+0x1f4>)
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	4638      	mov	r0, r7
 80038c4:	f3af 8000 	nop.w
 80038c8:	1c42      	adds	r2, r0, #1
 80038ca:	4606      	mov	r6, r0
 80038cc:	d1d6      	bne.n	800387c <_svfiprintf_r+0x174>
 80038ce:	89ab      	ldrh	r3, [r5, #12]
 80038d0:	065b      	lsls	r3, r3, #25
 80038d2:	f53f af2d 	bmi.w	8003730 <_svfiprintf_r+0x28>
 80038d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d8:	b01d      	add	sp, #116	; 0x74
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038de:	ab03      	add	r3, sp, #12
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	462a      	mov	r2, r5
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <_svfiprintf_r+0x1f4>)
 80038e6:	a904      	add	r1, sp, #16
 80038e8:	4638      	mov	r0, r7
 80038ea:	f000 f879 	bl	80039e0 <_printf_i>
 80038ee:	e7eb      	b.n	80038c8 <_svfiprintf_r+0x1c0>
 80038f0:	08003f7c 	.word	0x08003f7c
 80038f4:	08003f86 	.word	0x08003f86
 80038f8:	00000000 	.word	0x00000000
 80038fc:	08003655 	.word	0x08003655
 8003900:	08003f82 	.word	0x08003f82

08003904 <_printf_common>:
 8003904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	4616      	mov	r6, r2
 800390a:	4699      	mov	r9, r3
 800390c:	688a      	ldr	r2, [r1, #8]
 800390e:	690b      	ldr	r3, [r1, #16]
 8003910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003914:	4293      	cmp	r3, r2
 8003916:	bfb8      	it	lt
 8003918:	4613      	movlt	r3, r2
 800391a:	6033      	str	r3, [r6, #0]
 800391c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003920:	4607      	mov	r7, r0
 8003922:	460c      	mov	r4, r1
 8003924:	b10a      	cbz	r2, 800392a <_printf_common+0x26>
 8003926:	3301      	adds	r3, #1
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	0699      	lsls	r1, r3, #26
 800392e:	bf42      	ittt	mi
 8003930:	6833      	ldrmi	r3, [r6, #0]
 8003932:	3302      	addmi	r3, #2
 8003934:	6033      	strmi	r3, [r6, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	f015 0506 	ands.w	r5, r5, #6
 800393c:	d106      	bne.n	800394c <_printf_common+0x48>
 800393e:	f104 0a19 	add.w	sl, r4, #25
 8003942:	68e3      	ldr	r3, [r4, #12]
 8003944:	6832      	ldr	r2, [r6, #0]
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	42ab      	cmp	r3, r5
 800394a:	dc26      	bgt.n	800399a <_printf_common+0x96>
 800394c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003950:	1e13      	subs	r3, r2, #0
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	bf18      	it	ne
 8003956:	2301      	movne	r3, #1
 8003958:	0692      	lsls	r2, r2, #26
 800395a:	d42b      	bmi.n	80039b4 <_printf_common+0xb0>
 800395c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003960:	4649      	mov	r1, r9
 8003962:	4638      	mov	r0, r7
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d01e      	beq.n	80039a8 <_printf_common+0xa4>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	6922      	ldr	r2, [r4, #16]
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf02      	ittt	eq
 8003976:	68e5      	ldreq	r5, [r4, #12]
 8003978:	6833      	ldreq	r3, [r6, #0]
 800397a:	1aed      	subeq	r5, r5, r3
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	bf0c      	ite	eq
 8003980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003984:	2500      	movne	r5, #0
 8003986:	4293      	cmp	r3, r2
 8003988:	bfc4      	itt	gt
 800398a:	1a9b      	subgt	r3, r3, r2
 800398c:	18ed      	addgt	r5, r5, r3
 800398e:	2600      	movs	r6, #0
 8003990:	341a      	adds	r4, #26
 8003992:	42b5      	cmp	r5, r6
 8003994:	d11a      	bne.n	80039cc <_printf_common+0xc8>
 8003996:	2000      	movs	r0, #0
 8003998:	e008      	b.n	80039ac <_printf_common+0xa8>
 800399a:	2301      	movs	r3, #1
 800399c:	4652      	mov	r2, sl
 800399e:	4649      	mov	r1, r9
 80039a0:	4638      	mov	r0, r7
 80039a2:	47c0      	blx	r8
 80039a4:	3001      	adds	r0, #1
 80039a6:	d103      	bne.n	80039b0 <_printf_common+0xac>
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b0:	3501      	adds	r5, #1
 80039b2:	e7c6      	b.n	8003942 <_printf_common+0x3e>
 80039b4:	18e1      	adds	r1, r4, r3
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	2030      	movs	r0, #48	; 0x30
 80039ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039be:	4422      	add	r2, r4
 80039c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c8:	3302      	adds	r3, #2
 80039ca:	e7c7      	b.n	800395c <_printf_common+0x58>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4622      	mov	r2, r4
 80039d0:	4649      	mov	r1, r9
 80039d2:	4638      	mov	r0, r7
 80039d4:	47c0      	blx	r8
 80039d6:	3001      	adds	r0, #1
 80039d8:	d0e6      	beq.n	80039a8 <_printf_common+0xa4>
 80039da:	3601      	adds	r6, #1
 80039dc:	e7d9      	b.n	8003992 <_printf_common+0x8e>
	...

080039e0 <_printf_i>:
 80039e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	7e0f      	ldrb	r7, [r1, #24]
 80039e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039e8:	2f78      	cmp	r7, #120	; 0x78
 80039ea:	4691      	mov	r9, r2
 80039ec:	4680      	mov	r8, r0
 80039ee:	460c      	mov	r4, r1
 80039f0:	469a      	mov	sl, r3
 80039f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039f6:	d807      	bhi.n	8003a08 <_printf_i+0x28>
 80039f8:	2f62      	cmp	r7, #98	; 0x62
 80039fa:	d80a      	bhi.n	8003a12 <_printf_i+0x32>
 80039fc:	2f00      	cmp	r7, #0
 80039fe:	f000 80d4 	beq.w	8003baa <_printf_i+0x1ca>
 8003a02:	2f58      	cmp	r7, #88	; 0x58
 8003a04:	f000 80c0 	beq.w	8003b88 <_printf_i+0x1a8>
 8003a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a10:	e03a      	b.n	8003a88 <_printf_i+0xa8>
 8003a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a16:	2b15      	cmp	r3, #21
 8003a18:	d8f6      	bhi.n	8003a08 <_printf_i+0x28>
 8003a1a:	a101      	add	r1, pc, #4	; (adr r1, 8003a20 <_printf_i+0x40>)
 8003a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a20:	08003a79 	.word	0x08003a79
 8003a24:	08003a8d 	.word	0x08003a8d
 8003a28:	08003a09 	.word	0x08003a09
 8003a2c:	08003a09 	.word	0x08003a09
 8003a30:	08003a09 	.word	0x08003a09
 8003a34:	08003a09 	.word	0x08003a09
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	08003a09 	.word	0x08003a09
 8003a40:	08003a09 	.word	0x08003a09
 8003a44:	08003a09 	.word	0x08003a09
 8003a48:	08003a09 	.word	0x08003a09
 8003a4c:	08003b91 	.word	0x08003b91
 8003a50:	08003ab9 	.word	0x08003ab9
 8003a54:	08003b4b 	.word	0x08003b4b
 8003a58:	08003a09 	.word	0x08003a09
 8003a5c:	08003a09 	.word	0x08003a09
 8003a60:	08003bb3 	.word	0x08003bb3
 8003a64:	08003a09 	.word	0x08003a09
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003a09 	.word	0x08003a09
 8003a70:	08003a09 	.word	0x08003a09
 8003a74:	08003b53 	.word	0x08003b53
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	602a      	str	r2, [r5, #0]
 8003a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e09f      	b.n	8003bcc <_printf_i+0x1ec>
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	0607      	lsls	r7, r0, #24
 8003a92:	f103 0104 	add.w	r1, r3, #4
 8003a96:	6029      	str	r1, [r5, #0]
 8003a98:	d501      	bpl.n	8003a9e <_printf_i+0xbe>
 8003a9a:	681e      	ldr	r6, [r3, #0]
 8003a9c:	e003      	b.n	8003aa6 <_printf_i+0xc6>
 8003a9e:	0646      	lsls	r6, r0, #25
 8003aa0:	d5fb      	bpl.n	8003a9a <_printf_i+0xba>
 8003aa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	da03      	bge.n	8003ab2 <_printf_i+0xd2>
 8003aaa:	232d      	movs	r3, #45	; 0x2d
 8003aac:	4276      	negs	r6, r6
 8003aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab2:	485a      	ldr	r0, [pc, #360]	; (8003c1c <_printf_i+0x23c>)
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	e012      	b.n	8003ade <_printf_i+0xfe>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	6029      	str	r1, [r5, #0]
 8003ac0:	0605      	lsls	r5, r0, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xe8>
 8003ac4:	681e      	ldr	r6, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0xee>
 8003ac8:	0641      	lsls	r1, r0, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xe4>
 8003acc:	881e      	ldrh	r6, [r3, #0]
 8003ace:	4853      	ldr	r0, [pc, #332]	; (8003c1c <_printf_i+0x23c>)
 8003ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2308      	moveq	r3, #8
 8003ad6:	230a      	movne	r3, #10
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ade:	6865      	ldr	r5, [r4, #4]
 8003ae0:	60a5      	str	r5, [r4, #8]
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	bfa2      	ittt	ge
 8003ae6:	6821      	ldrge	r1, [r4, #0]
 8003ae8:	f021 0104 	bicge.w	r1, r1, #4
 8003aec:	6021      	strge	r1, [r4, #0]
 8003aee:	b90e      	cbnz	r6, 8003af4 <_printf_i+0x114>
 8003af0:	2d00      	cmp	r5, #0
 8003af2:	d04b      	beq.n	8003b8c <_printf_i+0x1ac>
 8003af4:	4615      	mov	r5, r2
 8003af6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003afa:	fb03 6711 	mls	r7, r3, r1, r6
 8003afe:	5dc7      	ldrb	r7, [r0, r7]
 8003b00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b04:	4637      	mov	r7, r6
 8003b06:	42bb      	cmp	r3, r7
 8003b08:	460e      	mov	r6, r1
 8003b0a:	d9f4      	bls.n	8003af6 <_printf_i+0x116>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d10b      	bne.n	8003b28 <_printf_i+0x148>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	07de      	lsls	r6, r3, #31
 8003b14:	d508      	bpl.n	8003b28 <_printf_i+0x148>
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	6861      	ldr	r1, [r4, #4]
 8003b1a:	4299      	cmp	r1, r3
 8003b1c:	bfde      	ittt	le
 8003b1e:	2330      	movle	r3, #48	; 0x30
 8003b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b28:	1b52      	subs	r2, r2, r5
 8003b2a:	6122      	str	r2, [r4, #16]
 8003b2c:	f8cd a000 	str.w	sl, [sp]
 8003b30:	464b      	mov	r3, r9
 8003b32:	aa03      	add	r2, sp, #12
 8003b34:	4621      	mov	r1, r4
 8003b36:	4640      	mov	r0, r8
 8003b38:	f7ff fee4 	bl	8003904 <_printf_common>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d14a      	bne.n	8003bd6 <_printf_i+0x1f6>
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	b004      	add	sp, #16
 8003b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	f043 0320 	orr.w	r3, r3, #32
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	4833      	ldr	r0, [pc, #204]	; (8003c20 <_printf_i+0x240>)
 8003b54:	2778      	movs	r7, #120	; 0x78
 8003b56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	6829      	ldr	r1, [r5, #0]
 8003b5e:	061f      	lsls	r7, r3, #24
 8003b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b64:	d402      	bmi.n	8003b6c <_printf_i+0x18c>
 8003b66:	065f      	lsls	r7, r3, #25
 8003b68:	bf48      	it	mi
 8003b6a:	b2b6      	uxthmi	r6, r6
 8003b6c:	07df      	lsls	r7, r3, #31
 8003b6e:	bf48      	it	mi
 8003b70:	f043 0320 	orrmi.w	r3, r3, #32
 8003b74:	6029      	str	r1, [r5, #0]
 8003b76:	bf48      	it	mi
 8003b78:	6023      	strmi	r3, [r4, #0]
 8003b7a:	b91e      	cbnz	r6, 8003b84 <_printf_i+0x1a4>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	2310      	movs	r3, #16
 8003b86:	e7a7      	b.n	8003ad8 <_printf_i+0xf8>
 8003b88:	4824      	ldr	r0, [pc, #144]	; (8003c1c <_printf_i+0x23c>)
 8003b8a:	e7e4      	b.n	8003b56 <_printf_i+0x176>
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	e7bd      	b.n	8003b0c <_printf_i+0x12c>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	6826      	ldr	r6, [r4, #0]
 8003b94:	6961      	ldr	r1, [r4, #20]
 8003b96:	1d18      	adds	r0, r3, #4
 8003b98:	6028      	str	r0, [r5, #0]
 8003b9a:	0635      	lsls	r5, r6, #24
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	d501      	bpl.n	8003ba4 <_printf_i+0x1c4>
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	e002      	b.n	8003baa <_printf_i+0x1ca>
 8003ba4:	0670      	lsls	r0, r6, #25
 8003ba6:	d5fb      	bpl.n	8003ba0 <_printf_i+0x1c0>
 8003ba8:	8019      	strh	r1, [r3, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	4615      	mov	r5, r2
 8003bb0:	e7bc      	b.n	8003b2c <_printf_i+0x14c>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	602a      	str	r2, [r5, #0]
 8003bb8:	681d      	ldr	r5, [r3, #0]
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7fc fb0e 	bl	80001e0 <memchr>
 8003bc4:	b108      	cbz	r0, 8003bca <_printf_i+0x1ea>
 8003bc6:	1b40      	subs	r0, r0, r5
 8003bc8:	6060      	str	r0, [r4, #4]
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd4:	e7aa      	b.n	8003b2c <_printf_i+0x14c>
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d0ad      	beq.n	8003b40 <_printf_i+0x160>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d413      	bmi.n	8003c12 <_printf_i+0x232>
 8003bea:	68e0      	ldr	r0, [r4, #12]
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	4298      	cmp	r0, r3
 8003bf0:	bfb8      	it	lt
 8003bf2:	4618      	movlt	r0, r3
 8003bf4:	e7a6      	b.n	8003b44 <_printf_i+0x164>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	47d0      	blx	sl
 8003c00:	3001      	adds	r0, #1
 8003c02:	d09d      	beq.n	8003b40 <_printf_i+0x160>
 8003c04:	3501      	adds	r5, #1
 8003c06:	68e3      	ldr	r3, [r4, #12]
 8003c08:	9903      	ldr	r1, [sp, #12]
 8003c0a:	1a5b      	subs	r3, r3, r1
 8003c0c:	42ab      	cmp	r3, r5
 8003c0e:	dcf2      	bgt.n	8003bf6 <_printf_i+0x216>
 8003c10:	e7eb      	b.n	8003bea <_printf_i+0x20a>
 8003c12:	2500      	movs	r5, #0
 8003c14:	f104 0619 	add.w	r6, r4, #25
 8003c18:	e7f5      	b.n	8003c06 <_printf_i+0x226>
 8003c1a:	bf00      	nop
 8003c1c:	08003f8d 	.word	0x08003f8d
 8003c20:	08003f9e 	.word	0x08003f9e

08003c24 <memmove>:
 8003c24:	4288      	cmp	r0, r1
 8003c26:	b510      	push	{r4, lr}
 8003c28:	eb01 0402 	add.w	r4, r1, r2
 8003c2c:	d902      	bls.n	8003c34 <memmove+0x10>
 8003c2e:	4284      	cmp	r4, r0
 8003c30:	4623      	mov	r3, r4
 8003c32:	d807      	bhi.n	8003c44 <memmove+0x20>
 8003c34:	1e43      	subs	r3, r0, #1
 8003c36:	42a1      	cmp	r1, r4
 8003c38:	d008      	beq.n	8003c4c <memmove+0x28>
 8003c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c42:	e7f8      	b.n	8003c36 <memmove+0x12>
 8003c44:	4402      	add	r2, r0
 8003c46:	4601      	mov	r1, r0
 8003c48:	428a      	cmp	r2, r1
 8003c4a:	d100      	bne.n	8003c4e <memmove+0x2a>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c56:	e7f7      	b.n	8003c48 <memmove+0x24>

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4d06      	ldr	r5, [pc, #24]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	f7fd f9ce 	bl	8001004 <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	2000046c 	.word	0x2000046c

08003c78 <memcpy>:
 8003c78:	440a      	add	r2, r1
 8003c7a:	4291      	cmp	r1, r2
 8003c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c80:	d100      	bne.n	8003c84 <memcpy+0xc>
 8003c82:	4770      	bx	lr
 8003c84:	b510      	push	{r4, lr}
 8003c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c8e:	4291      	cmp	r1, r2
 8003c90:	d1f9      	bne.n	8003c86 <memcpy+0xe>
 8003c92:	bd10      	pop	{r4, pc}

08003c94 <_realloc_r>:
 8003c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c98:	4680      	mov	r8, r0
 8003c9a:	4614      	mov	r4, r2
 8003c9c:	460e      	mov	r6, r1
 8003c9e:	b921      	cbnz	r1, 8003caa <_realloc_r+0x16>
 8003ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	f7ff bc49 	b.w	800353c <_malloc_r>
 8003caa:	b92a      	cbnz	r2, 8003cb8 <_realloc_r+0x24>
 8003cac:	f7ff fbda 	bl	8003464 <_free_r>
 8003cb0:	4625      	mov	r5, r4
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb8:	f000 f81b 	bl	8003cf2 <_malloc_usable_size_r>
 8003cbc:	4284      	cmp	r4, r0
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	d802      	bhi.n	8003cc8 <_realloc_r+0x34>
 8003cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cc6:	d812      	bhi.n	8003cee <_realloc_r+0x5a>
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f7ff fc36 	bl	800353c <_malloc_r>
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d0ed      	beq.n	8003cb2 <_realloc_r+0x1e>
 8003cd6:	42bc      	cmp	r4, r7
 8003cd8:	4622      	mov	r2, r4
 8003cda:	4631      	mov	r1, r6
 8003cdc:	bf28      	it	cs
 8003cde:	463a      	movcs	r2, r7
 8003ce0:	f7ff ffca 	bl	8003c78 <memcpy>
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	f7ff fbbc 	bl	8003464 <_free_r>
 8003cec:	e7e1      	b.n	8003cb2 <_realloc_r+0x1e>
 8003cee:	4635      	mov	r5, r6
 8003cf0:	e7df      	b.n	8003cb2 <_realloc_r+0x1e>

08003cf2 <_malloc_usable_size_r>:
 8003cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf6:	1f18      	subs	r0, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfbc      	itt	lt
 8003cfc:	580b      	ldrlt	r3, [r1, r0]
 8003cfe:	18c0      	addlt	r0, r0, r3
 8003d00:	4770      	bx	lr
	...

08003d04 <_init>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr

08003d10 <_fini>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr
>>>>>>> aa09c4e4f2138aec697b290cce4da5d86891dfe0
